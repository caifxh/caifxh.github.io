<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caifxh.github.io</id>
    <title>fxh</title>
    <updated>2020-04-03T09:08:15.625Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caifxh.github.io"/>
    <link rel="self" href="https://caifxh.github.io/atom.xml"/>
    <subtitle>菜</subtitle>
    <logo>https://caifxh.github.io/images/avatar.png</logo>
    <icon>https://caifxh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, fxh</rights>
    <entry>
        <title type="html"><![CDATA[扩展KMP]]></title>
        <id>https://caifxh.github.io/post/kuo-zhan-kmp/</id>
        <link href="https://caifxh.github.io/post/kuo-zhan-kmp/">
        </link>
        <updated>2020-04-03T08:16:45.000Z</updated>
        <content type="html"><![CDATA[<h4 id="z算法">Z算法</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_ca07496a60-1.PNG" alt="1.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_f6f54a1c60-2.PNG" alt="2.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_33dfcb7e60-3.png" alt="3.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_3623ccf060-4.png" alt="4.png" loading="lazy"><br>
r[5] = 7<br>
r[6] = 7<br>
l[5] = 5<br>
l[6] = 5<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_5abceae260-5.png" alt="5.png" loading="lazy"><br>
对于 Z[2] 我们需要暴力计算。<br>
也就是暴力计算 S[1..|S|] 和 S[2..|S|] 的最长公共前缀。<br>
如果 Z[2] &gt; 0, 那么 r = r[2], l = l[2] = 2<br>
如果 Z[2] = 0, 那么 r = r[2] = 0, l = l[2] = 0</p>
<p>我们的目标就是用已有的 Z[2], Z[3], ..., Z[k-1]，来推<br>
出 Z[k].<br>
假设 k = 121, Z[2..120] 已经知道了<br>
r[120] = 130, l[120] = 100<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_884cb29e60-6.png" alt="6.png" loading="lazy"><br>
划分成[l,i-1],[i,r]<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_cfa5d35a60-7.png" alt="7.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_37ddc43260-8.png" alt="8.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_61fb79d060-9.PNG" alt="9.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_83939b3660-10.PNG" alt="10.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_121af6c460-11.png" alt="11.png" loading="lazy"><br>
蓝色部分一定不相等，否则说明z-box可以右移</p>
<p>第一步：<br>
初始化 Z[]，暴力计算 Z[2]</p>
<pre><code>for(int i = 1;i &lt;= n;i ++) z[i] = 0;
int l, r;
while(str[1 + z[2]] == str[2 + z[2]]) z[2] ++; 
l = 2, r = 2+ z[2]-1;
</code></pre>
<p>第二步：<br>
枚举 i，分三种情况依次计算 Z[i]</p>
<pre><code>for(int i = 3;i &lt;= n;i ++)
{
    if(i &gt; r)
    {
        while(str[1 + z[i]] == str[i + z[i]]) z[i] ++;
        l = i, r = i + z[i] - 1;
    }
    else
    {
        if(z[i - l + 1] &lt; r - i + 1) z[i] = z[i - l + 1];
        else
        {
            z[i] = r - i;
            while(str[1 + z[i]] == str[i + z[i]]) z[i] ++; 
            l = i, r = i + z[i] - 1; 
        }
    } 
}
</code></pre>
<h4 id="时间复杂度是-on-的">时间复杂度是 O(n) 的</h4>
<h4 id="扩展kmp">扩展KMP</h4>
<p>给定两个字符串 S 和 T（长度分别为 n 和 m）<br>
定义 extend[i] 为 S[i..n] 与 T 的最长公共前缀的长度。<br>
求出 extend 数组<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_e93cf15860-12.PNG" alt="12.PNG" loading="lazy"><br>
如果 S = T，那么 extend 数组就是 Z 数组。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_fe0303ca60-13.PNG" alt="13.PNG" loading="lazy"></p>
<p>假设现在遍历到了 S[i]，且 S[1], S[2],…, S[i-1]都已经算出<br>
与 Z 算法类似，设置两个变量 l 和 r，r 表示能和 T 匹<br>
配到的最右边的位置，l 为 r 对应的起始位置。<br>
也就是 S[l .. r] = T[1.. r-l+1]<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_1677f3ac60-14.PNG" alt="14.PNG" loading="lazy"></p>
<p>S[i] 对应的是 T[i-l+1]<br>
现在要计算的是 S[i..n] 与 T 的最长公共前缀<br>
注意到此时 S[i..r] = T[i-l+1 .. r-l+1]<br>
所以我们可以先对 T 求一遍 Z 数组，然后考察一下 Z[i-l+1]<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_7411db9460-15.png" alt="15.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_a95260c660-15.png" alt="15.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/08/9969_de7d174760-16.png" alt="16.png" loading="lazy"></p>
<pre><code>void calc_Z(char *str) 
{
	int n = strlen(str + 1);
	for(int i = 1; i &lt;= n; i ++) z[i] = 0;
	z[1] = n;
	int l, r = 0;
	for(int i = 2; i &lt;= n; i ++) 
	{
		if(i &gt; r) 
		{
			while(str[1 + z[i]] == str[i + z[i]]) z[i] ++;
			l = i, r = i + z[i] - 1;
		} else 
		{
			if(z[i - l + 1] &lt; r - i + 1) z[i] = z[i - l + 1];
			else 
			{
				z[i] = r - i + 1;
				while(str[1 + z[i]] == str[i + z[i]]) z[i] ++;
				l = i, r = i + z[i] - 1;
			}
		}
	}
}
</code></pre>
<pre><code>void calc_extend(char *S, char *T) 
{
	calc_Z(T);
	int l, r = 0;
	int n = strlen(S + 1);
	int m = strlen(T + 1);
	for (int i = 1; i &lt;= n; i ++) 
	{
		if (i &gt; r) 
		{
			while (i + ext[i] &lt;= n &amp;&amp; 1 + ext[i] &lt;= m &amp;&amp;
			        S[i + ext[i]] == T[1 + ext[i]]) ext[i] ++;
			l = i, r = i + ext[i] - 1;
		}
		else 
		{
			if (i + z[i - l + 1] - 1 &lt; r) ext[i] = z[i - l + 1];
			else 
			{
				ext[i] = r - i + 1;
				while (i + ext[i] &lt;= n &amp;&amp; 1 + ext[i] &lt;= m &amp;&amp; S[i +ext[i]] == T[1 + ext[i]]) 
					ext[i] ++;
				l = i, r = i + ext[i] - 1;
			}
		}
	}
}
</code></pre>
<h4 id="例题">例题</h4>
<p>题意：给你n个字符串，求这n个字符串的最长公共子串</p>
<p><a href="https://vjudge.net/problem/HDU-4333">hdu4333</a><br>
给一个 L 位数的正整数 N，每次可以把这个数的最后一位移到最前面来，得到一个新的数。<br>
总共最多可以得到 n 个数，重复的只算一次。<br>
问这些数中，等于 n 的，小于 n的，大于 n 的数分别有几个。<br>
L ≤ 1e5</p>
<blockquote></blockquote>
<p>样例：<br>
341 （答案： 1 1 1）</p>
<p>我们只需要把这个数复制两遍，然后只考虑长度为 n 的子串。这些子串就是移动过程中产生的数。<br>
如何和原数 N 做比较呢</p>
<p>假设现在的数是 S[i .. i+L-1], N 是 S[1..L]<br>
我们只要求出他们的最长公共前缀 x，如果 x = n 说明这两个数相等。<br>
否则，比较 S[x] 和 S[i+x-1] 的大小，就可以确定他们的大小关系。<br>
求 x ，就是扩展 KMP 中的 Z 算法。x = min(n, Z[i])</p>
<p>最后一步去重。对 N 跑一次 KMP<br>
如果 L-next[L] 是 L 的约数，那么 L-next[L] 是 N 的最小循环节。否则 N 的 最小循环节是 L。<br>
对循环节内的情况枚举一遍即可,或除以最小循环节个数。<br>
时间复杂度 O(L)</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=200010;
char str[N];
int ne[N];
int z[N];

int main()
{
    int T;
    scanf(&quot;%d&quot;,&amp;T);
    for(int kas=1;kas&lt;=T;kas++)
    {
        scanf(&quot;%s&quot;,str+1);
        
        int len=strlen(str+1);
        for(int i=2,j=0;i&lt;=len;i++)
        {
            while(j &amp;&amp; str[i] != str[j+1])
                j=ne[j];
            if(str[i] == str[j+1])
                j++;
            ne[i]=j;
        }
        
        for(int i=1;i&lt;=len;i++)
            str[i+len]=str[i];
        str[len*2+1]='\0';
        memset(z,0,sizeof z);
        z[1]=len*2;
        int l,r=0;
        
        for(int i=2;i&lt;=len*2;i++)
        {
            if(i&gt;r)
            {
                while(str[1+z[i]] == str[i+z[i]])
                    z[i]++;
                l=i,r=i+z[i]-1;
            }
            else 
            {
                if(z[i-l+1] &lt; r-i+1)
                    z[i]=z[i-l+1];
                else 
                {
                    z[i]=r-i;
                    while(str[1+z[i]] == str[i+z[i]])
                        z[i]++;
                    l=i,r=i+z[i]-1;
                }
            }
        }
        
        int gre=0,eql=0,les=0;
        for(int i=1;i&lt;=len;i++)
        {
            if(z[i] &gt;= len)
                eql++;
            else if(str[1+z[i]] &gt; str[i+z[i]])
                les++;
            else gre++;
        }
        
        int t;
        if(len%(len-ne[len]) == 0)
            t=len/(len-ne[len]);//循环节个数 
        else 
            t=1;
        printf(&quot;Case %d: %d %d %d\n&quot;,kas,les/t,eql/t,gre/t);
    }
}
</code></pre>
<p>对循环节内的情况枚举<a href="https://paste.ubuntu.com/p/HrvmzSySDv/">代码</a></p>
<p><a href="https://vjudge.net/problem/POJ-3376">poj3376</a><br>
给你 n 个字符串 m[1], m[2], …, m[n]。 求 S = m[i]m[j] （1 &lt;= i,j &lt;= n）是回文串的数量。<br>
n 个字符串的长度之和不超过 2·1e6</p>
<blockquote></blockquote>
<p>样例输入：<br>
3a<br>
ab<br>
ba<br>
答案：5（aa,aba,aba,abba,baab)</p>
<p>考虑什么情况下 i 和 j 拼起来会是回文串。</p>
<ul>
<li>
<p>i的长度小于j，那么i一定是j的反串的前缀，且j的反串剩下的后缀是回文串</p>
</li>
<li>
<p>i的长度等于j，那么i等于j的反串</p>
</li>
<li>
<p>i的长度大于j，那么j的反串一定是i的前缀，且i串剩下的后缀是回文串</p>
</li>
</ul>
<p>我们可以将这n个字符串插入trie，每个节点要维护两个值：<br>
value1. 到当前节点的字符串个数；value2.当前节点后面的回文子串个数</p>
<p>我们用每个字符串的反串去trie上查找，要构成回文串有以下情况：</p>
<ul>
<li>
<p>1.此反串是其他串的前缀，那么组合回文串的数量就要加上value2</p>
</li>
<li>
<p>2.此反串的前缀是某些字符串，且反串剩下的后缀是回文串，那么组合回文串的数量要加上value1</p>
</li>
<li>
<p>3.2的特例：此反串的前缀是某些字符串，且反串剩下的后缀为空，同样要加上value1，这种情况可以和2一起处理</p>
</li>
</ul>
<p>留下的问题就是一个字符串的所有后缀中，哪些是回文串。<br>
对于串 S，我们先求出正串 S 对反串 T 的 extend[i]<br>
那么对于每个 i，如果 S[i..n] 和 T 的最长公共前缀等于<br>
S[i..n] 的长度，说明 S[i..n] 是一个回文串。<br>
因此整道题就在线性的时间复杂度内解决了。</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=2e6+10;
int trie[N][26],tot=1;
int n;
char s[N],t[N];
int len[N];
int slen;
int z[N],ext[N];
bool flag[2][N];
int bg[N],ed[N];
typedef long long LL;
struct Node
{
	int v1,v2;
}cnt[N];

void get_z(char *s)
{
	int n=strlen(s+1);
	for(int i=1;i&lt;=n;i++) z[i]=0;
	z[1]=n;
	int l,r=0;
	for(int i=2;i&lt;=n;i++)
	{
		if(i&gt;r)
		{
			while(s[1+z[i]] == s[i+z[i]])
				z[i]++;
			l=i,r=i+z[i]-1;
		}
		else
		{
			if(z[i-l+1] &lt; r-i+1)
				z[i]=z[i-l+1];
			else
			{
				z[i]=r-i;
				while(s[1+z[i]] == s[i+z[i]])
					z[i]++;
				l=i,r=i+z[i]-1;
			}
		}
	}
}

void exkmp(int type,char *s,char *t)
{
	get_z(t);
	int n=strlen(s+1);
	int m=strlen(t+1);
	for(int i=1;i&lt;=n;i++)
		ext[i]=0;
	int l,r=0;
	for(int i=1;i&lt;=n;i++)
	{
		if(i&gt;r)
		{
			while(i+ext[i] &lt;=n &amp;&amp; 1+ext[i] &lt;=m &amp;&amp;
			s[i+ext[i]] == t[1+ext[i]])
				ext[i]++;
			l=i,r=i+ext[i]-1;
		}
		else
		{
			if(z[i-l+1] &lt; r-i+1)
				ext[i]=z[i-l+1];
			else
			{
				ext[i]=r-i+1;
				while(i + ext[i] &lt;= n &amp;&amp; 1 + ext[i] &lt;= m &amp;&amp; 
				s[i+ext[i]] == t[1+ext[i]])
					ext[i]++;
				l=i,r=i+ext[i]-1;
			}
		}
	}

	for(int i=1;i&lt;=n;i++)
	{
		//cout&lt;&lt;&quot;---&quot;&lt;&lt;ext[i]&lt;&lt;endl;
		if(ext[i] == n-i+1)
			flag[type][i+slen]=true;//s[i...n]为回文串
	}
}

void insert(int k)
{
	int p=1;
	for(int i=bg[k];i&lt;=ed[k];i++)
	{
		cnt[p].v2+=flag[0][i];
		int ch=s[i]-'a';
		if(!trie[p][ch])
			trie[p][ch]=++tot;
		p=trie[p][ch];
	}
	cnt[p].v1++;
}

void print(int k)
{
	int p=1;
	for(int i=bg[k];i&lt;=ed[k];i++)
	{
		int ch=s[i]-'a';
		p=trie[p][ch];
		cout&lt;&lt;&quot;---&quot;&lt;&lt;cnt[p].v2&lt;&lt;' '&lt;&lt;cnt[p].v1&lt;&lt;endl;
	}
}

int main()
{
	scanf(&quot;%d&quot;,&amp;n);
	
	for(int i=1;i&lt;=n;i++)
	{
		scanf(&quot;%d&quot;,&amp;len[i]);
		scanf(&quot;%s&quot;,s+1+slen);
		for(int j=1;j&lt;=len[i];j++)
			t[slen+j]=s[slen+len[i]+1-j];
		t[slen+len[i]+1]='\0';
		exkmp(0,s+slen,t+slen);
		exkmp(1,t+slen,s+slen);

		bg[i]=slen+1;
		slen+=len[i];
		ed[i]=slen;

		insert(i);
		//print(i);
	}

	LL ans=0;
	for(int i=1;i&lt;=n;i++)
	{
		int p=1;
		bool f=true;
		for(int j=ed[i];j&gt;=bg[i];j--)//用反串去trie上匹配
		{
			int k=s[j]-'a';
			if(!trie[p][k])
			{
				f=false;
				break;
			}
			else
				p=trie[p][k];
			if(flag[1][bg[i]+ed[i]-j+1] || j == bg[i])
				ans+=cnt[p].v1;
		}
		if(f)
			ans+=cnt[p].v2;
	}

	printf(&quot;%lld\n&quot;,ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分图]]></title>
        <id>https://caifxh.github.io/post/er-fen-tu/</id>
        <link href="https://caifxh.github.io/post/er-fen-tu/">
        </link>
        <updated>2020-04-03T08:13:08.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一-定义">一、定义</h4>
<p>二分图：是图论中的一种特殊模型。若能将无向图G=(V,E)的顶点V划分为两个交集为空的顶点集，并且任意边的两个端点都分属于两个集合，则称图G为一个为二分图。</p>
<p>二分图判定定理：一张无向图是二分图：当且仅当图中不存在奇环（奇环是指长度为奇数的环）</p>
<p>匹配：在图论中，一个「匹配」（matching）是一个边的集合，其中任意两条边都没有公共顶点。例如，图 3、图 4 中红色的边就是图 2 的匹配。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_210efb1e59-14.PNG" alt="14.PNG" loading="lazy"><br>
我们定义匹配点、匹配边、未匹配点、非匹配边，它们的含义非常显然。例如图 3 中 1、4、5、7 为匹配点，其他顶点为未匹配点；1-5、4-7为匹配边，其他边为非匹配边。</p>
<p>最大匹配：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。图 4 是一个最大匹配，它包含 4 条匹配边。</p>
<p>完美匹配：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。图 4 是一个完美匹配。显然，完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突）。但并非每个图都存在完美匹配。</p>
<p>举例来说：如下图所示，如果在某一对男孩和女孩之间存在相连的边，就意味着他们彼此喜欢。是否可能让所有男孩和女孩两两配对，使得每对儿都互相喜欢呢？图论中，这就是完美匹配问题。如果换一个说法：最多有多少互相喜欢的男孩/女孩可以配对儿？这就是最大匹配问题。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_7a059b4259-15.png" alt="15.png" loading="lazy"></p>
<p>交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边...形成的路径叫交替路。</p>
<p>增广路：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。例如，图 5 中的一条增广路如图 6 所示（图中的匹配点均用红色标出）：<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_11e08cd859-16.png" alt="16.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_17217a1859-17.png" alt="17.png" loading="lazy"></p>
<p>增广路有一个重要特点：非匹配边比匹配边多一条。因此，研究增广路的意义是改进匹配。只要把增广路中的匹配边和非匹配边的身份交换即可。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。交换后，图中的匹配边数目比原来多了 1 条。</p>
<h4 id="二-二分图判定">二、二分图判定</h4>
<p>据定义，可以知道如果对于一个图，我们将它的节点用黑白染色，那么如果它是二分图，它的每一条边的两端，都可以实现一黑一白。</p>
<p>所以在判定时，只需要根据这样的性质，对于每一个点，把它所有的未遍历的子节点染上和它不一样的颜色，如果最后没有哪一条边两端颜色一样，就说明它是一个二分图，否则就不是。</p>
<p>在代码实现的时候可以写成对于每一个点，把未遍历的子接点染上与它不同的颜色，如果存在子节点已经染过色了并且与它颜色相同，可以直接判定它不是一个二分图。、<br>
看一个这样的图<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/27/9969_ece1a49659-11.png" alt="11.png" loading="lazy"><br>
会有这样的染色过程<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/27/9969_f86474ce59-12.png" alt="12.png" loading="lazy"><br>
最后4和5都是白色，gg。</p>
<p>到此我们就得到了整个图的算法：<br>
1.选取一个未染色的点u进行染色<br>
2.遍历u的相邻节点v：若v未染色，则染色成与u不同的颜色，并对v重复第2步；若v已经染色，如果 u和v颜色相同，判定不可行退出遍历。<br>
3,若所有节点均已染色，则判定可行。<br>
<a href="https://www.acwing.com/problem/content/862/">模板题</a></p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 100010, M = 200010;

int n, m;
int h[N], e[M], ne[M], idx;
int color[N];

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

bool dfs(int u, int c)
{
    color[u] = c;

    for (int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if (!color[j])
        {
            if (!dfs(j, 3 - c)) return false;
        }
        else if (color[j] == c) return false;
    }

    return true;
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);

    memset(h, -1, sizeof h);

    while (m -- )
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        add(a, b), add(b, a);
    }

    bool flag = true;
    for (int i = 1; i &lt;= n; i ++ )
        if (!color[i])
        {
            if (!dfs(i, 1))
            {
                flag = false;
                break;
            }
        }

    if (flag) puts(&quot;Yes&quot;);
    else puts(&quot;No&quot;);

    return 0;
}
</code></pre>
<p>（如果图是不连通的，要枚举起点）</p>
<p><a href="https://www.acwing.com/problem/content/259/">acwing257</a><br>
二分+染色法<br>
为了让监狱内部的怨气值越小，则需要尽量把怨气值大的罪犯分开</p>
<ul>
<li>
<p>check(x)：表示将任意怨气值大于x的两名罪犯放在两个监狱，且两个监狱内部的最大怨气值均不超过x，符合返回true，符合返回false</p>
</li>
<li>
<p>check(x)函数的实现，验证该图中是否为一个二分图，即监狱内部怨气值小于x的边均去掉，用染色法验证</p>
</li>
</ul>
<p>注意：两个罪犯的怨气值最小的情况下是1，若监狱内部发生冲突事件怨气值的最大值一定大于等于1，而本年内监狱中未发生任何冲突事件，输出是0，因此二分的初始范围是l = 0，r = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>,</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int N=20010,M=200010;
int h[N],e[M],ne[M],w[M],idx;
int n,m;
int color[N];

void add(int a, int b, int c)
{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;
}

bool dfs(int u,int c,int mid)
{
    color[u]=c;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(w[i] &lt;= mid)
            continue;
        if(!color[j])
        {
            if(!dfs(j,3-c,mid))
                return false;
        }
        else if(color[j] == c)
            return false;
    }
    return true;
}

bool check(int mid)
{
    memset(color,0,sizeof color);
    
    for(int i=1;i&lt;=n;i++)
        if(!color[i])
            if(!dfs(i,1,mid))
                return false;
    
    return true;
}

int main()
{
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    memset(h,-1,sizeof h);
    
    while(m--)
    {
        int a,b,c;
        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);
        add(a,b,c);
        add(b,a,c);
    }
    
    int l=0,r=1e9;
    while(l&lt;r)
    {
        int mid=l+r&gt;&gt;1;
        if(check(mid))
            r=mid;
        else
            l=mid+1;
    }
    
    cout&lt;&lt;l&lt;&lt;endl;
    
    return 0;
}
</code></pre>
<h4 id="三-二分图最大匹配">三、二分图最大匹配</h4>
<p>看这么个图<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_5c09747059-001.png" alt="001.png" loading="lazy"><br>
ABCD是四个死宅，而1234是四个可爱的纸片人小姐姐<br>
图中的连线表示死宅喜欢的小姐姐<br>
现在我们要给他们配对</p>
<p>从A开始，A喜欢1<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_69a458e859-002.png" alt="002.png" loading="lazy"></p>
<p>然后，B也喜欢1，那么反正A还可以要3，本着礼让的精神，A就让给了B<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_9447feb059-003.png" alt="003.png" loading="lazy"></p>
<p>然后发现，C也喜欢1，反正B还可以找2，就把1让给C<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_aa68dd0e59-004.png" alt="004.png" loading="lazy"></p>
<p>D也喜欢1，但是C如果没有1，就找不到小姐姐了，那么作为一个死宅他是不会退让的。</p>
<p>这样我们就模拟了二分图匹配的全过程，这种方法就是匈牙利算法。<br>
用不太正经的方法来说，匈牙绿算法就是一个绿与被绿协商与退让的过程。<br>
<a href="https://www.acwing.com/problem/content/863/">模板题</a></p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 510, M = 100010;

int n1, n2, m;
int h[N], e[M], ne[M], idx;
int match[N];
bool st[N];

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

bool find(int x)
{
    for (int i = h[x]; i != -1; i = ne[i])
    {
        int j = e[i];
        if (!st[j])
        {
            st[j] = true;
            if (match[j] == 0 || find(match[j]))
            {
                match[j] = x;
                return true;
            }
        }
    }

    return false;
}

int main()
{
    scanf(&quot;%d%d%d&quot;, &amp;n1, &amp;n2, &amp;m);

    memset(h, -1, sizeof h);

    while (m -- )
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        add(a, b);
    }

    int res = 0;
    for (int i = 1; i &lt;= n1; i ++ )
    {
        memset(st, false, sizeof st);
        if (find(i)) res ++ ;
    }

    printf(&quot;%d\n&quot;, res);

    return 0;
}
</code></pre>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_b5789d605a-23.PNG" alt="23.PNG" loading="lazy"><br>
<a href="https://www.acwing.com/problem/content/374/">acwing372</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_c6cf51265a-22.png" alt="22.png" loading="lazy"></p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

#define x first
#define y second

using namespace std;

typedef pair&lt;int, int&gt; PII;

const int N = 110;

int n, m;
PII match[N][N];
bool g[N][N], st[N][N];
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

bool find(int x, int y)
{
    for (int i = 0; i &lt; 4; i ++ )
    {
        int a = x + dx[i], b = y + dy[i];
        if (a &amp;&amp; a &lt;= n &amp;&amp; b &amp;&amp; b &lt;= n &amp;&amp; !g[a][b] &amp;&amp; !st[a][b])
        {
            st[a][b] = true;
            PII t=match[a][b];
            if (t.x == -1 || find(t.x, t.y))
            {
                match[a][b] = {x, y};
                return true;
            }
        }
    }

    return false;
}

int main()
{
    cin &gt;&gt; n &gt;&gt; m;

    while (m -- )
    {
        int x, y;
        cin &gt;&gt; x &gt;&gt; y;
        g[x][y] = true;
    }

    memset(match, -1, sizeof match);

    int res = 0;
    for (int i = 1; i &lt;= n; i ++ )
        for (int j = 1; j &lt;= n; j ++ )
            if ((i + j) % 2 &amp;&amp; !g[i][j])
            {
                memset(st, 0, sizeof st);
                if (find(i, j)) res ++ ;
            }

    cout &lt;&lt; res &lt;&lt; endl;

    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/description/375/">acwing373</a><br>
将行标号当做二分图的左图，列标号当做二分图的右图，放置一枚車则表示对应的行和对应的列之间有边。</p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int MAXN=210;
bool g[MAXN][MAXN];
bool vis[MAXN];
int m,match[MAXN];
bool find(int x){
    for(int i=1;i&lt;=m;i++){
        if(vis[i] || g[x][i])continue;
        vis[i]=1;
        if(!match[i] || find(match[i]))
        {
            match[i]=x;
            return true;
        }
    }
    return false;
}
int main()
{
    int n,t;
    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;t);
    for(int i=1;i&lt;=t;i++){
        int x,y;
        scanf(&quot;%d%d&quot;,&amp;x,&amp;y);
        g[x][y]=true;
    }
    int ans=0;
    for(int i=1;i&lt;=n;i++)//枚举行
    {
        memset(vis,0,sizeof(vis));
        if(find(i)) ans++;
    }
    printf(&quot;%d\n&quot;,ans);
    return 0;
}
</code></pre>
<h4 id="四-最小点覆盖">四、最小点覆盖</h4>
<p>图G=(V,E),在图G中选取尽可能少的点，使得图中每一条边至少有一个端点被选中。换句话说，假如选了一个点就相当于覆盖了以它为端点的所有边，你需要选择最少的点来覆盖所有的边。<br>
这个问题在二分图问题中被称为最小点覆盖问题。即用<code>最少的点去覆盖所有的边</code>。</p>
<h4 id="könig定理二分图最小点覆盖-二分图最大匹配数">König定理，二分图最小点覆盖 = 二分图最大匹配数</h4>
<p>那么，怎么证明它是正确的呢？又怎么才能求出需要哪些点呢？<br>
匈牙利算法中 我们从左边一个没有匹配的点，沿着一条满足“一条不被匹配，一条被匹配，下一条又没有被匹配”的路（交错路径）的路走。但是现在，最大匹配已经完成，没有这样的路了。也就是说，我们可以找到很多增广路，但是它们的终点不再是没匹配的。<br>
我们可以从左边所有没匹配的点出发，按照“交错出现（走一个匹配过的再走一个没匹配的）”的要求走，标记经过的所有点（左右的点要分开标记详见代码）。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/27/9969_9b4263f059-10.png" alt="10.png" loading="lazy"><br>
（蓝色细线为最大匹配，粗线为不完整的增广路，红点为最小点覆盖集，对号是标记）</p>
<h4 id="可以发现最小覆盖点集即左边没标记的和右边标记了的">可以发现，最小覆盖点集即左边没标记的和右边标记了的</h4>
<ul>
<li>为什么这样得到的点集点的个数恰好有M个呢？</li>
</ul>
<p>因为每个点都是某个匹配边的其中一个端点。如果左边的哪个点是没有匹配过的，那么它就会被当成起点被标记；如果右边的哪个点是没有匹配过的，那就走不到它那里去（否则就找到了一条完整的增广路）。而一个匹配边又不可能右端点是标记了的，同时左端点是没标记的（不然的话左边的点就可以经过这条边到达了）。因此，最后我们圈起来的点与匹配边一一对应。</p>
<ul>
<li>为什么这样得到的点集可以覆盖所有的边呢？</li>
</ul>
<p>因为不可能存在某一条边，它的右端点是没有标记的，而左端点是有标记的。原因如下：如果这条边不属于我们的匹配边，那么右端点就可以通过这条边到达（从而得到标记）；如果这条边属于我们的匹配边，那么左端点不可能是一条路径的起点，于是它的标记只能是从这条边的右端点过来的，右端点就应该有标记。</p>
<ul>
<li>为什么这是最小的点覆盖集呢？</li>
</ul>
<p>因为不可能有比M还小的点覆盖集了，因为要覆盖这M条匹配边至少就需要M个点（再次回到匹配的定义）。</p>
<p><a href="https://www.acwing.com/problem/content/378/">acwing376</a><br>
题目描述到每台机器每次转换模式都需要启动一次，每个任务要么在A机器的a[i]模式进行，要么在B机器的b[i]模式进行，模式a[i]和模式b[i]连上一条边（这条边就对应于这个任务）。每条边至少选择1个模式点（这个点上可执行所有可在该模式下执行的任务），最少能选多少个模式(点)覆盖所有边，即求最小点覆盖问题<br>
注意：两台机器一开始的模式是0，因此每个任务如果可以在模式为0的情况下进行，则不需要进行重启，可以舍去。</p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 110;

int n, m, k;
int match[N];
bool g[N][N], st[N];

bool find(int x)
{
    for (int i = 0; i &lt; m; i ++ )
        if (!st[i] &amp;&amp; g[x][i])
        {
            st[i] = true;
            if (match[i] == -1 || find(match[i]))
            {
                match[i] = x;
                return true;
            }
        }

    return false;
}

int main()
{
    while (cin &gt;&gt; n, n)
    {
        cin &gt;&gt; m &gt;&gt; k;
        memset(g, 0, sizeof g);
        memset(match, -1, sizeof match);

        while (k -- )
        {
            int t, a, b;
            cin &gt;&gt; t &gt;&gt; a &gt;&gt; b;
            if (!a || !b) continue;
            g[a][b] = true;
        }

        int res = 0;
        for (int i = 0; i &lt; n; i ++ )
        {
            memset(st, 0, sizeof st);
            if (find(i)) res ++ ;
        }

        cout &lt;&lt; res &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/UVA11419">uva11419</a><br>
目大意：给定一个n行m列的网格图,某些网格上有敌人.请你选择一些行和一些列,覆盖所有敌人.并且使得选择的行与列数量之和最小<br>
X集合表示行号，Y集合表示列号，如果在（i,j）的地方有目标则在X集合的i位置与Y集合的j位置连边，只要一条边有一个端点被选中则说明这个目标被打掉，这道题就转化为二分图的最小点覆盖数量</p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;
const int N = 1010;
int n, m, k;
int match[N];
bool g[N][N], st[N];
bool vis[N];
int pl[N],pr[N];

bool find(int x)
{
    for (int i = 1; i &lt;= m; i ++ )
        if (!st[i] &amp;&amp; g[x][i])
        {
            st[i] = true;
            if (!match[i] || find(match[i]))
            {
                match[i] = x;
                vis[x]=true;//标记左边匹配的点 
                return true;
            }
        }

    return false;
}

void dfs(int x)
{
	pl[x]=true;
	for(int i=1;i&lt;=m;i++)
		if(g[x][i])
		{
			if(match[i] &amp;&amp; !pr[i] &amp;&amp; !pl[match[i]])//v有一条匹配了的边&amp;&amp;v未被标记&amp;&amp;v的匹配对象未被标记
			{
				pr[i]=true;
				dfs(match[i]);
			}
		}
}

void print()
{
	memset(pl,0,sizeof pl);
	memset(pr,0,sizeof pr);
	for(int i=1;i&lt;=n;i++)
		if(!vis[i])
			dfs(i);//以左侧未匹配点为起点
	
	for(int i=1;i&lt;=n;i++)
		if(!pl[i])
			printf(&quot;r%d &quot;,i);//左侧的未标记点
		
	for(int i=1;i&lt;=m;i++)
		if(pr[i])
			printf(&quot;c%d &quot;,i);//右侧的标记点
	
	printf(&quot;\n&quot;);
}

int main()
{
    while (cin &gt;&gt; n &gt;&gt; m &gt;&gt; k, n)
    {
        memset(g, 0, sizeof g);
        memset(match, 0, sizeof match);
		memset(vis,0,sizeof vis);
        while (k -- )
        {
            int a, b;
            cin &gt;&gt; a &gt;&gt; b;
            g[a][b] = true;
        }

        int res = 0;
        for (int i = 1; i &lt;= n; i ++ )
        {
            memset(st, 0, sizeof st);
            if (find(i)) res ++ ;
        }

        printf(&quot;%d &quot;,res);
        print(); 
    }

    return 0;
}
</code></pre>
<h4 id="五-最大独立集">五、最大独立集</h4>
<p>图G=(V,E)，在图G中选取尽可能多的点，使得<strong>任意两个点之间没有连边</strong>。找出一个包含顶点数最多的独立集称为最大独立集。<br>
这个问题在二分图问题中被称为最大独立集问题。</p>
<h4 id="方法最大独立集所有顶点数-最小顶点覆盖所有顶点数-最大匹配数">方法：最大独立集=所有顶点数-最小顶点覆盖=所有顶点数-最大匹配数</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_b8a3775459-18.png" alt="18.png" loading="lazy"><br>
在上面这个图中最小顶点覆盖=3，即2,4,7构成最小顶点覆盖，则其他点6个构成最大独立集。且其他点不可能相连。假设其他点相连则这条边必定没有被2,4,7 覆盖，与2,4,7是最小顶点覆盖矛盾。因此其他点之间必定没有边。而2,4,7是最小顶点覆盖，所谓最小就是不能再小了，因此我们的独立集就是最大了。</p>
<p>对应地，任意两点之间都有一条边相连的子图被称为无向图的“团”。点数最多的团被称为图的最大团。</p>
<h4 id="定理无向图g的最大团等于其补图g的最大独立集">定理：无向图G的最大团等于其补图G'的最大独立集。</h4>
<p>补图的定义是：对于图中点x和点y，若x和y之间有边，那么在补图中没有，否则有。<br>
<a href="https://www.acwing.com/problem/content/380/">acwing378</a><br>
两个格子的马若能互相攻击，则这两个格子能连上一条边，与棋盘覆盖 的题目相似，若两只马能够互相攻击则两只马的格子一定是两种类型的格子，如下图所示，选出最多个格子，使得选出的格子之间没有边，即求最大独立集问题<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_3582c5f45a-24.png" alt="24.png" loading="lazy"></p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

#define x first
#define y second

using namespace std;

typedef pair&lt;int, int&gt; PII;

const int N = 110;

int n, m, k;
PII match[N][N];
bool g[N][N], st[N][N];

int dx[8] = {-2, -1, 1, 2, 2, 1, -1, -2};
int dy[8] = {1, 2, 2, 1, -1, -2, -2, -1};

bool find(int x, int y)
{
    for (int i = 0; i &lt; 8; i ++ )
    {
        int a = x + dx[i], b = y + dy[i];
        if (a &lt; 1 || a &gt; n || b &lt; 1 || b &gt; m) continue;
        if (g[a][b]) continue;
        if (st[a][b]) continue;

        st[a][b] = true;

        PII t = match[a][b];
        if (t.x == 0 || find(t.x, t.y))
        {
            match[a][b] = {x, y};
            return true;
        }
    }

    return false;
}

int main()
{
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;

    for(int i=0;i&lt;k;i++)
    {
        int x, y;
        cin &gt;&gt; x &gt;&gt; y;
        g[x][y] = true;
    }

    int res = 0;
    for (int i = 1; i &lt;= n; i ++ )
        for (int j = 1; j &lt;= m; j ++ )
        {
            if(!g[i][j] &amp;&amp; (i+j)%2)
            {
                memset(st, 0, sizeof st);
                if (find(i, j)) res ++ ;
            }
        }

    cout &lt;&lt; n * m - k - res &lt;&lt; endl;

    return 0;
}
</code></pre>
<h4 id="六-dag的最小路径点覆盖">六、DAG的最小路径点覆盖</h4>
<p>定义：在一个有向图中，找出最少的路径，使得这些路径经过了所有的点。<br>
最小路径覆盖分为<code>最小不相交路径覆盖</code>和<code>最小可相交路径覆盖</code>。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_7ddcbc8859-21.png" alt="21.png" loading="lazy"><br>
<strong>最小不相交路径覆盖</strong>：每一条路径经过的顶点各不相同。如图，其最小路径覆盖数为3。即1-&gt;3&gt;4，2，5。<br>
<strong>最小可相交路径覆盖</strong>：每一条路径经过的顶点可以相同。如果其最小路径覆盖数为2。即1-&gt;3-&gt;4，2-&gt;3&gt;5。</p>
<p>特别的，每个点自己也可以称为是路径覆盖，只不过路径的长度是0。</p>
<h4 id="dag的最小不相交路径覆盖">DAG的最小不相交路径覆盖</h4>
<p>DAG的最小路径覆盖是指找最小数目的互相不相交的有向路径,满足DAG的所有顶点都被覆盖.</p>
<h4 id="公式dag的最小路径覆盖数dag图中的节点数-相应二分图中的最大匹配数">公式:DAG的最小路径覆盖数=DAG图中的节点数-相应二分图中的最大匹配数.</h4>
<p>下面我们来解释上面公式为什么成立<br>
对应一个DAG,如何构造相应的二分图?对于DAG中的一个顶点p,二分图中有两个顶点p和p',对应DAG中的一条有向边p-&gt;q,二分图中有p-q'的一条无向边.二分图中p属于S集合,p'属于T集合.<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/28/9969_6d2d4be259-19.png" alt="19.png" loading="lazy"><br>
<strong>证明</strong>：上图中,对应左边的DAG建立构造右边的二分图,可以找到二分图的一个最大匹配M:1-3',3-4',那么M中的这两条匹配边怎样对应DAG中的路径的边?<br>
使二分图中一条边对应DAG中的一条有向边,1-3'对应DAG图中的有向边1-&gt;3,这样DAG中1就会有一个后继顶点(3会是1的唯一后继,因为二分图中一个顶点至多关联一条边!),所以1不会成为DAG中一条路径中的结尾顶点,同样,3-4'对应DAG中3-&gt;4,3也不会成为结尾顶点,那么原图中总共4个顶点,减去2个有后继的顶点,就剩下没有后继的顶点,即DAG路径的结尾顶点,而每个结尾顶点正好对应DAG中的一条路径,二分图中寻找最大匹配M,就是找到了对应DAG中的非路径结尾顶点的最大数目,那么DAG中顶点数-|M|就是DAG中结尾顶点的最小数目,即DAG的最小路径覆盖数.<br>
因为路径之间不能有公共点，所以加的边之间也不能有公共点，这是匹配的定义。</p>
<p><a href="http://poj.org/problem?id=1422">poj1422</a><br>
题目大意：有n个点和m条有向边，现在要在点上放一些伞兵，然后伞兵沿着图走，直到不能走为止,每条边只能是一个伞兵走过，问最少放多少个伞兵</p>
<p>思路：<br>
这是一个很明显的最小路径覆盖，用二分图来做,对于这样的一个有向图做最小路径覆盖。<br>
首先建图，先拆点，将每个点分为两个点，左边是1到n个点，右边是1-n个点，然后每一条有向边对应左边的点指向右边的点，这样建好图之后求最大匹配数。<br>
最小路径覆盖=点数-最大匹配数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=130;
int n,m;				//交叉路口和街道的个数
int g[N][N];
int match[N];
bool st[N];
 
bool find(int x)
{
	for(int i=1;i&lt;=n;i++)
		if(g[x][i] &amp;&amp; !st[i])
		{		
			st[i]=true;
			if (!match[i] || find(match[i]))
            {
                match[i] = x;
                return true;
            }
		}
		
	return false;
}
 
int main()
{
	int a,b,t;
	scanf(&quot;%d&quot;,&amp;t);
	while(t--)
	{
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		memset(g,0,sizeof g);
		memset(match,0,sizeof match);
		for(int i=0;i&lt;m;i++)
		{
			scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
			g[a][b]=1;
		}
		
		int res=0;
		for(int i=1;i&lt;=n;i++)
		{
			memset(st,0,sizeof st);
			if(find(i)) res++;
		}
		
		cout&lt;&lt;n-res&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<h4 id="dag的最小可相交路径覆盖">DAG的最小可相交路径覆盖</h4>
<p>先用floyd求出原图的传递闭包，即如果a到b有路径a-&gt;...-&gt;x-&gt;...b，那么就加边a-&gt;b。然后就转化成了最小不相交路径覆盖问题。<br>
<strong>证明</strong>：为了连通两个点，某条路径可能经过其它路径的中间点。比如1-&gt;3-&gt;4，2-&gt;4-&gt;5。但是如果两个点a和b是连通的，只不过中间需要经过其它的点，那么可以在这两个点之间加边，那么a就可以直达b，不必经过中点的，那么就转化成了最小不相交路径覆盖。</p>
<p><a href="http://poj.org/problem?id=2594">poj2594</a></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=510;
int n,m;				//交叉路口和街道的个数
bool g[N][N];
int match[N];
bool st[N];

void floyd()
{
	for(int i=1;i&lt;=n;i++)
		for(int j=1;j&lt;=n;j++)
			for(int k=1;k&lt;=n;k++)
				g[i][j] |= g[i][k] &amp;&amp; g[k][j];
}
 
bool find(int x)
{
	for(int i=1;i&lt;=n;i++)
		if(g[x][i] &amp;&amp; !st[i])
		{		
			st[i]=true;
			if (!match[i] || find(match[i]))
            {
                match[i] = x;
                return true;
            }
		}
		
	return false;
}
 
int main()
{
	while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m) &amp;&amp; n)
	{
		memset(g,0,sizeof g);
		memset(match,0,sizeof match);
		for(int i=0;i&lt;m;i++)
		{
			int a,b;
			scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
			g[a][b]=1;
		}
		floyd();
		
		int res=0;
		for(int i=1;i&lt;=n;i++)
		{
			memset(st,0,sizeof st);
			if(find(i)) res++;
		}
		
		cout&lt;&lt;n-res&lt;&lt;endl;
	}

	return 0;
}
</code></pre>
<p>其他题：<br>
https://vjudge.net/contest/249592#overview</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树上差分]]></title>
        <id>https://caifxh.github.io/post/shu-shang-chai-fen/</id>
        <link href="https://caifxh.github.io/post/shu-shang-chai-fen/">
        </link>
        <updated>2020-04-03T08:11:31.000Z</updated>
        <content type="html"><![CDATA[<h4 id="树上差分">树上差分</h4>
<p>树上差分有什么作用？举个例子，如果题目要求对树上的一段路径进行操作，并询问某个点或某条边被经过的次数，树上差分就可以派上用场了。这就是树上差分的基本操作。<br>
树上差分，就是利用差分的性质，对路径上的重要节点进行修改（而不是暴力全改），作为其差分数组的值，最后在求值时，利用dfs遍历求出差分数组的前缀和，就可以达到降低复杂度的目的。<br>
需要知道的树的性质:</p>
<ul>
<li>树上任意两个点的路径唯一.</li>
<li>任何子节点的父亲节点唯一.(可以认为根节点是没有父亲的)</li>
</ul>
<p>类比于差分数组,树上差分利用的思想也是前缀和思想.(在这里应该是子树和思想.<br>
当我们记录树上节点被经过的次数,记录某条边被经过的次数的时候.<br>
如果每次强制dfs去标记的话,时间复杂度将高到爆炸!<br>
因此我们引入了树上差分!<br>
与树上差分在一起的使用的是DFS，因为在回溯的时候,我们可以计算出子树的大小.</p>
<p>定义数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">cnt_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为节点i被经过的次数.</p>
<h4 id="1点的差分">1.点的差分</h4>
<p>例如,我们从 s--&gt;t ,求这条路径上的点被经过的次数.<br>
很明显的,我们需要找到他们的LCA,(因为这个点是中转点啊<br>
我们需要让cnt[s]++,让cnt[t]++，而让他们的cnt[lca]--，cnt[faher(lca)]--;<br>
如图，绿色的数字代表经过次数.<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_d18e82ce56-0001.jfif" alt="0001.jfif" loading="lazy"><br>
根据刚刚所讲,我们的标记应该是这样的↓<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_ea290ba656-00002.jfif" alt="00002.jfif" loading="lazy"><br>
考虑：我们搜索到s,向上回溯.<br>
下面以u表示当前节点,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">son_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代表i的儿子节点.(如果一些son不给出下标,即代表当前节点u的儿子<br>
每个u统计它的子树大小,顺着路径标起来.(即cnt[u]+=cnt[son])<br>
我们会发现第一次从s回溯到它们的LCA时候,cnt[LCA]+=cnt[son[LCA]]<br>
此时cnt[LCA]=0! &quot;不是LCA会被经过一次嘛,为什么是0!&quot;<br>
别急,我们继续搜另一边.<br>
继续：我们搜索到t,向上回溯.<br>
依旧统计每个u的子树大小cnt[u]+=cnt[son]<br>
再度回到LCA 依旧 是cnt[LCA]+=cnt[son[LCA]]<br>
这个时候 cnt[LCA]=1 这就达到了我们要的效果。<br>
担忧： 万一我们再从LCA向上回溯的时候使得其父亲节点的子树和为1怎么办?<br>
这样我们不就使得其父亲节点被经过了一次? 因此我们需要在cnt[faher(lca)]--<br>
这样就达到了标记我们路径上的点的要求!</p>
<p>模板题：<a href="https://www.luogu.com.cn/problem/P3128">luoguP3128</a></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;cmath&gt;
using namespace std;
const int N=50010,M=N*2;
int h[N],e[M],ne[M],idx;
int n,m;
int dep[N];
int q[N];
int fa[N][16];
int p[N];

void add(int a,int b)
{
	e[idx]=b,ne[idx]=h[a],h[a]=idx++;
}

void bfs()
{
	memset(dep,0x3f,sizeof dep);
	dep[0]=0,dep[1]=1;
	int hh=0,tt=0;
	q[0]=1;
	while(hh &lt;= tt)
	{
		int t=q[hh++];
		for(int i=h[t];~i;i=ne[i])
		{
			int j=e[i];
			if(dep[j] &gt; dep[t] +1)
			{
				dep[j] = dep[t] + 1;
				q[++tt]=j;
				fa[j][0]=t;
				for(int k=1;k&lt;=15;k++)
					fa[j][k]=fa[fa[j][k-1]][k-1];
			}
		}
	}
}

int lca(int a,int b)
{
	if(dep[a] &lt; dep[b])
		swap(a,b);
	for(int  k=15;k&gt;=0;k--)
		if(dep[fa[a][k]] &gt;= dep[b])
			a=fa[a][k];
		
	if(a == b)
		return a;
	for(int k=15;k&gt;=0;k--)
		if(fa[a][k] != fa[b][k])
		{
			a=fa[a][k];
			b=fa[b][k];
		}
		
	return fa[a][0]; 
}

void dfs(int u,int fa)
{
	for(int i=h[u];~i;i=ne[i])
	{
		int j=e[i];
		if(j != fa)
		{
			dfs(j,u);
			p[u]+=p[j];
		}
	}
}

int main()
{
	//cout&lt;&lt;log2(50000)&lt;&lt;endl;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	memset(h,-1,sizeof h);
	for(int i=0;i&lt;n-1;i++)
	{
		int u,v;
		scanf(&quot;%d%d&quot;,&amp;u,&amp;v);
		add(u,v);
		add(v,u);
	}
	
	bfs();
	
	while(m--)
	{
		int a,b;
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		int anc=lca(a,b);
		p[a]++,p[b]++,p[anc]--,p[fa[anc][0]]--;
	}
	
	dfs(1,-1);
	
	int res=0;
	for(int i=1;i&lt;=n;i++)	
		res=max(res,p[i]);
	printf(&quot;%d\n&quot;,res);
	return 0;
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P3258">luoguP3258</a><br>
很明显,这是一道点差分.但是不同的是,我们需要在每个位置”中转“一下.<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/25/9969_b6e9f1f457-5.PNG" alt="5.PNG" loading="lazy"><br>
即会重复经过除了起点和终点外的点。<br>
还要注意的是,当我们到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 这一位置的时候,小熊会吃饭 ,即在这里不会有糖果吃. 所以这个位置的经过次数也需要减一<br>
只放个主函数，其他都是模板。。。</p>
<pre><code>int main()
{
	//cout&lt;&lt;log2(300000)&lt;&lt;endl;
	scanf(&quot;%d&quot;,&amp;n);
	memset(h,-1,sizeof h);
	for(int i=1;i&lt;=n;i++)	
		scanf(&quot;%d&quot;,&amp;w[i]);
	for(int i=0;i&lt;n-1;i++)
	{
		int u,v;
		scanf(&quot;%d%d&quot;,&amp;u,&amp;v);
		add(u,v);
		add(v,u);
	}
	
	bfs();
	
	for(int i=1;i&lt;n;i++)
	{
		int a=w[i],b=w[i+1];
		int anc=lca(a,b);
		p[a]++,p[b]++,p[anc]--,p[fa[anc][0]]--;
	}
	
	dfs(1,-1);
	
	for(int i=2;i&lt;=n;i++)
		p[w[i]]--;

	for(int i=1;i&lt;=n;i++)	
		printf(&quot;%d\n&quot;,p[i]);
	return 0;
}
</code></pre>
<h4 id="2边的差分">2.边的差分</h4>
<p>我们对边进行差分需要把边塞给点,但是,这里的标记并不是同点差分一样.<br>
把边塞给点的话,是塞给这条边所连的深度较深的节点. (即塞给儿子节点<br>
红色边为需要经过的边,绿色的数字代表经过次数<br>
正常的话,我们的图是这样的.↓<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_dfda95b556-003.jfif" alt="003.jfif" loading="lazy"><br>
但是由于我们把边塞给了点,因此我们的图应该是这样的↓<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_f1ac4d5056-004.jfif" alt="004.jfif" loading="lazy"><br>
但是根据我们点差分的标记方式来看的话显然是行不通的,<br>
这样的话我们会经过father[LCA]--&gt; LCA这一路径.<br>
因此考虑如何标记我们的点,来达到经过红色边的情况<br>
聪明的你一定想到了,这样来标记<br>
cnt[s]+=1， cnt[t]+=1 ，cnt[LCA]-=2<br>
这样回溯的话,我们即可只经过图中红色边啦!</p>
<p><a href="https://www.acwing.com/problem/content/description/354/">acwing352</a><br>
“主要边” 构成一棵树，而一条 “附加边” 必然会和其两端的 LCA 形成环，<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_ec0765e257-00001.png" alt="00001.png" loading="lazy"><br>
那么，每一条主要边存在三种情况：<br>
1、没有被任何环覆盖<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_fa4fc41e57-00002.png" alt="00002.png" loading="lazy"><br>
2、只被一个环给覆盖<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_06f800e757-00003.png" alt="00003.png" loading="lazy"><br>
3、被2个及以上的环覆盖<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_11af308657-00004.png" alt="00004.png" loading="lazy"></p>
<ul>
<li>
<p>对于第一种情况，我们切掉一条“主要边”后其实已经将整张图切成了两部分，但根据题意，还要再切掉一条“附加边”，很显然，随便切哪条都可以，因此此时的方案数即为“附加边”的个数 M。</p>
</li>
<li>
<p>对于第二种情况，我们切掉一条“主要边”后，由于它是在一个环中，所以只能切掉它所在环中的唯一一条“附加边”，因此此时的方案数为 1。</p>
</li>
<li>
<p>对于第三种情况，由于“主要边”存在于2个及以上的环中，因此切掉它之后会使覆盖它的其中两个环合并成一个新环，而我们知道要将一个环切开（此时只有把环切断才能将整张图切开）必须要切两刀，但我们只能再切一刀，所以我们无论如何都不能切开整张图了，因此此时的方案数为 0。</p>
</li>
</ul>
<p>分类讨论完了，我们该怎么去统计每条边被环覆盖的次数呢？<br>
我们就可以用树上差分来做。<br>
与它父亲节点之间的边被环覆盖的次数。</p>
<blockquote>
<p>最后，根据加法原理，我们只要依次统计每条主要边能产生的方案贡献，累加起来即可。</p>
</blockquote>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 100010, M = N * 2;
int n, m;
int h[N], e[M], ne[M], idx;
int depth[N], fa[N][17];
int p[N];
int q[N];
int ans;

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void bfs()
{
    memset(depth, 0x3f, sizeof depth);
    depth[0] = 0, depth[1] = 1;
    int hh = 0, tt = 0;
    q[0] = 1;

    while (hh &lt;= tt)
    {
        int t = q[hh ++ ];
        for (int i = h[t]; ~i; i = ne[i])
        {
            int j = e[i];
            if (depth[j] &gt; depth[t] + 1)
            {
                depth[j] = depth[t] + 1;
                q[ ++ tt] = j;
                fa[j][0] = t;
                for (int k = 1; k &lt;= 16; k ++ )
                    fa[j][k] = fa[fa[j][k - 1]][k - 1];
            }
        }
    }
}

int lca(int a, int b)
{
    if (depth[a] &lt; depth[b]) swap(a, b);
    for (int k = 16; k &gt;= 0; k -- )
        if (depth[fa[a][k]] &gt;= depth[b])
            a = fa[a][k];
    if (a == b) return a;
    for (int k = 16; k &gt;= 0; k -- )
        if (fa[a][k] != fa[b][k])
        {
            a = fa[a][k];
            b = fa[b][k];
        }
    return fa[a][0];
}

int dfs(int u, int fa)
{
    for (int i = h[u]; ~i; i = ne[i])
    {
        int j = e[i];
        if (j != fa)
        {
            dfs(j, u);
            p[u]+=p[j];
        }
            
    }
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    memset(h, -1, sizeof h);
    for (int i = 0; i &lt; n - 1; i ++ )//主要边 
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        add(a, b), add(b, a);
    }

    bfs();

    for (int i = 0; i &lt; m; i ++ )//附加边 
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        int anc = lca(a, b);
        p[a] ++, p[b] ++, p[anc] -= 2;
    }
    dfs(1, -1);
    
    for(int i=2;i&lt;=n;i++)//边的差分特判根结点 
    {
    	if(!p[i])
    		ans+=m;
    	if(p[i] == 1)
    		ans++;
	}
	cout&lt;&lt;ans&lt;&lt;endl;
	return 0;
    	

    return 0;
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P2680">luoguP</a><br>
读完题,我们发现,这是一道边差分的题.<br>
为了使得最长的路径最短,我们自然地想到二分答案<br>
简单分析 于是建完边我们先dfs一遍预处理出根节点到每个节点的距离.并把边权塞给点。<br>
预处理距离的话只需要再在dfs中加入一句即可,然后我们可以计算出每条航道间的距离<br>
我们需要将被经过次数最多,且边权最大的边删去.<br>
这样能使我们所用总时间最大值尽可能小<br>
要求最大值最小? 很明显,我们想到了二分答案.<br>
那么如何将二分答案转移到树上呢?<br>
不妨考虑二分最终所有请求的最大树上距离,最后只需判断是否能够通过删掉一条边的边权,最终能否达到这个最大距离即可,样就将一个求解问题转化为了判定问题</p>
<h4 id="解法">解法</h4>
<blockquote></blockquote>
<p>既然想到了二分答案,那我们就二分路径的长度.(即工作时间.<br>
如果一些路径长度大于当前二分的mid,我们就需要记录这些路径上的边其被经过次数.<br>
(比mid小的路径一定已经合法,我们可以在mid时间内完成任务.)<br>
假设路径长度大于mid的有num个<br>
(我们找到被这些路径共同经过的最大的边权,删去它,使得这些路径长度都小于mid,那么这个mid就是合法的.</p>
<h4 id="小细节">小细节</h4>
<p>我们可以通过排序得到最大的路径长度,如果这条最长的路径减去被经过次数&lt;=mid,那这个mid就是合法的,我们就可以去寻找更优解.</p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include&lt;cmath&gt;
using namespace std;
const int N = 300010, M = N * 2;
int n, m;
int h[N], e[M],w[M], ne[M], idx;
int depth[N], fa[N][19];
int p[N];
int q[N];
int ans;
int dist[N];
struct Node
{
	int x,y,anc,dis;
	bool operator&lt; (const Node &amp;W) const 
	{
		return dis &gt; W.dis;
	}
}query[N];
int edge[N];


void add(int a, int b,int c)
{
    e[idx] = b, w[idx]=c, ne[idx] = h[a], h[a] = idx ++ ;
}

void bfs()
{
    memset(depth, 0x3f, sizeof depth);
    depth[0] = 0, depth[1] = 1;
    int hh = 0, tt = 0;
    q[0] = 1;

    while (hh &lt;= tt)
    {
        int t = q[hh ++ ];
        for (int i = h[t]; ~i; i = ne[i])
        {
            int j = e[i];
            if (depth[j] &gt; depth[t] + 1)
            {
                depth[j] = depth[t] + 1;
                dist[j]=dist[t]+w[i];
                edge[j]=w[i];
                q[ ++ tt] = j;
                fa[j][0] = t;
                for (int k = 1; k &lt;= 18; k ++ )
                    fa[j][k] = fa[fa[j][k - 1]][k - 1];
            }
        }
    }
}

int lca(int a, int b)
{
    if (depth[a] &lt; depth[b]) swap(a, b);
    for (int k = 18; k &gt;= 0; k -- )
        if (depth[fa[a][k]] &gt;= depth[b])
            a = fa[a][k];
    if (a == b) return a;
    for (int k = 18; k &gt;= 0; k -- )
        if (fa[a][k] != fa[b][k])
        {
            a = fa[a][k];
            b = fa[b][k];
        }
    return fa[a][0];
}

int dfs(int u, int fa)
{
    for (int i = h[u]; ~i; i = ne[i])
    {
        int j = e[i];
        if (j != fa)
        {
            dfs(j, u);
            p[u]+=p[j];
        }  
    }
}

bool check(int mid)
{
	memset(p,0,sizeof p);
	int num=0,maxd=0;
	for(int i=0;i&lt;m;i++)
	{
		if(query[i].dis &lt;= mid)
			continue;
		p[query[i].x]++;
		p[query[i].y]++;
		p[query[i].anc]-=2;
		num++;
	}
	
	dfs(1,-1);
	
	for(int i=2;i&lt;=n;i++)
		if(p[i] == num)
			maxd=max(maxd,edge[i]);
	
	if(query[0].dis - maxd &lt;= mid)
		return true;
	return false;
}

int main()
{
	//cout&lt;&lt;log2(300000)&lt;&lt;endl;
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    memset(h, -1, sizeof h);
    for (int i = 0; i &lt; n - 1; i ++ )//主要边 
    {
        int a, b,c;
        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b,&amp;c);
        add(a, b,c), add(b, a,c);
    }

    bfs();
	
	int l=0,r=0;
    for (int i = 0; i &lt; m; i ++ )//附加边 
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        int anc = lca(a, b);
        int d=dist[a]+dist[b]-2*dist[anc];
        query[i]={a,b,anc,d};
        r=max(r,d);
    }
    
    sort(query,query+m);
    
    while(l&lt;r)
    {
    	int mid=l+r&gt;&gt;1;
    	if(check(mid))
    		r=mid;
    	else 
    		l=mid+1;
	}
	
	cout&lt;&lt;l&lt;&lt;endl;
	return 0;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牛客寒假第一场]]></title>
        <id>https://caifxh.github.io/post/niu-ke-han-jia-di-yi-chang/</id>
        <link href="https://caifxh.github.io/post/niu-ke-han-jia-di-yi-chang/">
        </link>
        <updated>2020-04-02T11:15:50.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/3002/G">G</a><br>
eli拿到了一个仅由小写字母组成的字符串。<br>
她想截取一段连续子串，这个子串包含至少k个相同的某个字母。<br>
她想知道，子串的长度最小值是多少？</p>
<p>题意<br>
相当于就是找字符串当中拥有k个相同字母的最小长度。<br>
直接模拟，通过二维数组，遇到个字母把在字符串的位置它放到对应字母的后面，然后进行判断，不断更新ans的最小值</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;
int n,k;
const int INF=0x3f3f3f3f;
int ans=INF;
vector&lt;int&gt; v[26];

int main()
{
    cin&gt;&gt;n&gt;&gt;k;
	string str;
	cin&gt;&gt;str;
	
	for(int i=0;i&lt;str.size();i++)
	{
		int x=str[i]-'a';
		v[x].push_back(i);
		int len=v[x].size();
		if(len &gt;= k)
			ans=min(ans,i-v[x][len-k]+1);
	}
	
	if(ans == INF)
		cout&lt;&lt;-1&lt;&lt;endl;
	else
		cout&lt;&lt;ans&lt;&lt;endl;

    return 0;
}
</code></pre>
<p><a href="https://ac.nowcoder.com/acm/contest/3002/A">A</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_a19ccce474-18.PNG" alt="18.PNG" loading="lazy"></p>
<p>题解<br>
可以把面积为 1 的“好三角形”分为两类分开统计：两条边和两个坐标轴平行；只有一条边和某个坐标轴平行。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_e233367674-2.PNG" alt="2.PNG" loading="lazy"><br>
对于第二种情况，可以分别统计底边为 2 、高为 1 和底边为 1 、高为 2 的情况。要注意底边靠近边界时的特殊讨论。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_451ae75874-3.PNG" alt="3.PNG" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long LL;
const int mod=1e9+7;

int main()
{
	LL n,m;
	cin&gt;&gt;n&gt;&gt;m;
	
	LL ans=4*((n-2)*(m-1)%mod + (m-2)*(n-1)%mod)%mod;
	
	ans=(ans+2*(n-2)*(n-2)%mod*(m-1)%mod+2*(m-2)*(m-2)%mod*(n-1)%mod)%mod;
	
	ans=(ans+2*(n-1)*(n-2)%mod*(m-2)%mod+2*(m-1)*(m-2)%mod*(n-2)%mod)%mod;
	
	cout&lt;&lt;ans&lt;&lt;endl;
	
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP其他优化]]></title>
        <id>https://caifxh.github.io/post/dp-you-hua/</id>
        <link href="https://caifxh.github.io/post/dp-you-hua/">
        </link>
        <updated>2020-04-02T04:45:38.000Z</updated>
        <content type="html"><![CDATA[<h4 id="滚动数组优化">滚动数组优化</h4>
<p><a href="https://www.luogu.com.cn/problem/P2679">P2679</a><br>
有两个仅包含小写英文字母的字符串 A 和 B。现在要从字符串 A 中取出 k 个互不重叠的非空子串，然后把这 k 个子串按照其在字符串 A中出现的顺序依次连接起来得到一个新的字符串。请问有多少种方案可以使得这个新串与字符串 B 相等？<br>
注意：子串取出的位置不同也认为是不同的方案。<br>
1 ≤ |A| ≤ 1000， 1 ≤ k ≤ |B| ≤ 200<br>
样例输入：（答案：7）<br>
6 3 2<br>
aabaab<br>
aab</p>
<p>我们令f[i][j][k][0/1]表示A串用了前i个字符，B串已覆盖前j个字符，目前为止已经选了<br>
k个子串，最后的0/1表示A串的这个字符选了没有(0没选，1选了)。<br>
为了得出状态转移方程，我们分情况讨论：<br>
先看f[i][j][k]<a href="%E5%BD%93%E5%89%8D%E4%BD%8D%E9%80%89%E4%BA%86">1</a>，显然当且仅当a[i]=b[j]的时候它才有意义，否则<br>
f[i][j][k][1]=0。<br>
到这个状态有三种方法：</p>
<ol>
<li>上一位没有选，新开一个子串</li>
<li>上一位选了，延续这个子串</li>
<li>上一位选了，但是仍然新开一个子串<br>
因此，我们有<br>
f[i][j][k][1]=f[i-1][j-1][k-1][0]+f[i-1][j-1][k][1]+f[i-1][j-1][k-1][1]</li>
</ol>
<p>然后讨论另一种情况：这个字符不选。<br>
这个比较简单，到这个状态有两种方法：</p>
<ol>
<li>上一位没有选，现在仍然不选</li>
<li>上一位选了，结束这个子串<br>
因此，我们有<br>
f[i][j][k][0]=f[i-1][j][k][0]+f[i-1][j][k][1]。</li>
</ol>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=210,M=1010,mod=1e9+7;
int f[2][N][N][2];
int n,m,k;
char a[M],b[N];

int main()
{
	cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;
	cin&gt;&gt;a+1&gt;&gt;b+1;
	
	f[0][0][0][0]=1;
	for(int i=1;i&lt;=n;i++)
	{
	    f[i&amp;1][0][0][0]=1;
		for(int j=1;j&lt;=m;j++)
			for(int t=1;t&lt;=k;t++)
				if(a[i] == b[j])
					f[i&amp;1][j][t][1]=((f[i-1&amp;1][j-1][t-1][1]+f[i-1&amp;1][j-1][t][1])%mod+f[i-1&amp;1][j-1][t-1][0])%mod,
					f[i&amp;1][j][t][0]=(f[i-1&amp;1][j][t][1]+f[i-1&amp;1][j][t][0])%mod;
				else 
				 	f[i&amp;1][j][t][0]=(f[i-1&amp;1][j][t][0]+f[i-1&amp;1][j][t][1])%mod,
				 	f[i&amp;1][j][t][1]=0;
	}
	
	printf(&quot;%d\n&quot;,(f[n&amp;1][m][k][0]+f[n&amp;1][m][k][1])%mod);
	return 0;
}
</code></pre>
<h4 id="矩阵乘法优化">矩阵乘法优化</h4>
<p>对于两维以上的 dp，如 f[i][j][k]，如果它的转移全部来自 f[i - 1]，那我们可以使用矩阵来加速。<br>
也就是把 f[i] 压缩成一维数组，f[i-1] 也压缩成一维数组。<br>
转移方程 就相当于 f[i-1] 到 f[i] 乘上的转移矩阵。<br>
<code>比如 f[i][t] += f[i-1][s]，那么转移矩阵中的第 s 行第t 列的元素就要加一。</code><br>
这样对于转移 n 次的 dp，我们只要计算矩阵的 n 次幂即可。<br>
时间复杂度可以从 O(n) 减少为 O(log n)</p>
<p>有 N 个方格排成一列，用红、绿、蓝、黄四种颜色来涂每个方格。<br>
每个格子都必须涂，且只能涂一次。问使得红色和蓝色的格子的数量为偶数的方案数。N ≤ 1e9</p>
<p>简单的线性模型。<br>
我们可以用 f[i][a][b][c][d] 来表示填了前 i 个数字，且4 种颜色的奇偶性分别为 a, b, c, d。（0 表示偶数，1 表<br>
示奇数）<br>
方便起见我们把 abcd 看作一个二进制数 s，范围是 0～15,记为 f[i][s]</p>
<p>思考转移：<br>
f[i][s] 可以转移到哪些状态呢？<br>
枚举第 i+1 位的颜色：一共有 0，1，2，3 四种选择。<br>
假设选择颜色 j，那么颜色 j 的奇偶性会发生改变，也就是<br>
得到了新的状态 s ^ (1 &lt;&lt; j)<br>
f[i + 1][s ^ (1 &lt;&lt; j)] += f[i][s]<br>
可以发现每次都是从 f[i] 转移到 f[i + 1]<br>
因此我们只要让矩阵的第 s 行第 s ^ (1 &lt;&lt; j) 列 加一即可。<br>
然后计算矩阵的 n 次幂，乘上 f[0] 就可以得到 f[n] 了。</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=20,mod=10007;
struct matrix
{
	int m[N][N];
	matrix()
	{
		memset(m,0,sizeof m);
	}
};
int n;

matrix mul(matrix a,matrix b)
{
	matrix c;
	for(int i=0;i&lt;1&lt;&lt;4;i++)
		for(int j=0;j&lt;1&lt;&lt;4;j++)
			for(int k=0;k&lt;1&lt;&lt;4;k++)
				c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j])%mod;
	return c;
}

matrix qmi(matrix a,int k)
{
	matrix c;
	for(int i=0;i&lt;1&lt;&lt;4;i++)
		c.m[i][i]=1;
		
	while(k)
	{
		if(k&amp;1) c=mul(c,a);
		a=mul(a,a);
		k&gt;&gt;=1;
	}
	return c;
}

int main()
{
	int T;
	cin&gt;&gt;T;
	while(T--)
	{
		scanf(&quot;%d&quot;,&amp;n);
		
		matrix a;
		for(int s=0;s&lt;1&lt;&lt;4;s++)
			for(int i=0;i&lt;4;i++)
				a.m[s][s^(1&lt;&lt;i)]=1;
		
		a=qmi(a,n);
		
		int ans=0;
		for(int i=0;i&lt;1&lt;&lt;4;i++)
			if(!(i&gt;&gt;1 &amp; 1) &amp;&amp; !(i&gt;&gt;2 &amp; 1))
				ans=(ans+a.m[0][i])%mod;
		
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<h4 id="前缀数组优化">前缀数组优化</h4>
<p>新的电话线架设在已有的 N(2≤N≤100000) 根电话线杆上，第 i 根电话线杆的高度为h<a href="1%E2%89%A4h%5Bi%5D%E2%89%A4100">i</a>。如果两根电话线杆的高度不同，那么就需要支付 C *电话线杆高度差(1≤C≤100)的费用。你不能移动电话线杆，只能按照原有的顺序在相邻的线杆间架设电话线。当然你也可以加高某些电话线杆，加高 X 米需要付出 X2 的费用。<br>
请问最少需要花多少钱建设新的电话线。</p>
<p>基本思路：<br>
观察发现 h[i] 不大，可以作为状态。<br>
用 f[i][j] 表示第 i 根电线杆的长度为 j 时的最小代价。<br>
状态转移：<br>
f[i][j] = min{f[i-1][k] + c * |j - k| + (j - h[i])2}</p>
<p>这样的时间复杂度是 O(NK2)<br>
状态有 NK 个，瓶颈在于计算每个状态需要枚举前一个电线杆的可能的 K 种高度。<br>
f[i][j] = min{f[i-1][k] + c * |j - k|} + (j - h[i])2<br>
但是前一部分还是有 j 在，如果我们能把 j 和 k 分离，我们就可以方便的优化。</p>
<p>我们可以把绝对值拆掉，也就是分类讨论：<br>
如果 j &gt; k，那么 |j - k| = j - k<br>
f[i][j] = min{f[i-1][k] - ck} + cj + (j - h[i])2<br>
如果 j &lt; k，那么 |j - k| = k - j<br>
f[i][j] = min{f[i-1][k] + ck} - cj + (j - h[i])2</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=100010,M=110,INF=0x3f3f3f3f;
int f[2][M];
int h[N],mx;
int n,c;

int sqr(int x)
{
	return x*x;
}

int main()
{
	scanf(&quot;%d%d&quot;,&amp;n,&amp;c);
	
	for(int i=1;i&lt;=n;i++)
		scanf(&quot;%d&quot;,&amp;h[i]),mx=max(mx,h[i]);
	
	for(int i=1;i&lt;=mx;i++)
	    f[0][i]=f[1][i]=INF;
	
	for(int i=h[1];i&lt;=mx;i++)
		f[1][i]=sqr(i-h[1]);//增高第一个电线杆的高度至i的花费为(i-h[1])(i-h[1]) 
	
	for(int i=2;i&lt;=n;i++)
	{
        int val=INF;
		for(int j=1;j&lt;=mx;j++)
		{
			val=min(val,f[i-1&amp;1][j]-c*j);
			if(j &gt;= h[i])
			    f[i&amp;1][j]=min(f[i&amp;1][j],val+c*j+sqr(j-h[i]));
                //f[i&amp;1]每轮要初始化为INF，因为比较时用到了f[i&amp;1]
		}
		
		val=INF;
		for(int j=mx;j&gt;=h[i];j--)
		{
			val=min(val,f[i-1&amp;1][j]+c*j);
			f[i&amp;1][j]=min(f[i&amp;1][j],val-c*j+sqr(j-h[i]));
		}
		
		for(int j=1;j&lt;=mx;j++)1]
		    f[i+1&amp;1][j]=INF;
	}
	
	int ans=INF;
	for(int i=h[n];i&lt;=mx;i++)
		ans=min(ans,f[n&amp;1][i]);
	
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
<h4 id="例题">例题</h4>
<p><a href="https://www.acwing.com/problem/content/235/">acwing223</a><br>
首先考虑计算从 x 到 y 的耗费体力最小的路径。<br>
显然是最短路问题。<br>
因为最多只有 300 个点，可以方便的使用 Floyd 算法先用<br>
O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">V^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>) 的时间复杂度预处理出任意两点间的最短路。</p>
<p>如何计算耗费体力值的期望值？<br>
只用对每条边考虑有多少概率会经过这条边。<br>
设概率为 p，这条边耗费的体力值是 w<br>
那么这条边对答案的贡献就是 pw。<br>
最后只要把每条边的贡献加起来就是耗费体力值的总和的期望。(期望的可加性)</p>
<p>用 f[i][j][p] 来表示前 i 节课中用了 j 次换教室的机会<br>
的最小体力总和的期望。<br>
p = 0 或 1，表示第 i 节课是否用了换教室的机会。<br>
目的是定位此时牛牛在哪个教室。<br>
p = 0 ➔ 没换，在 c[i] 教室<br>
p = 1 ➔ 换了，在 d[i] 教室</p>
<p>对第 i 节课，考虑决策：换 or 不换。<br>
不换：<br>
牛牛需要赶到教室 c[i]<br>
有两种可能<br>
一种是上一节课换了：</p>
<ul>
<li>有k[i-1]的概率从d[i-1]赶来</li>
<li>有(1-k[i-1])的概率从c[i-1]赶来</li>
</ul>
<p>另一种是没换：</p>
<ul>
<li>从c[i-1]赶来</li>
</ul>
<p>换：<br>
牛牛有 k[i] 的概率需要赶到教室 d[i]， 有 (1-k[i]) 的概率需要赶到教室 c[i]<br>
而上一节课也有两种可能：<br>
上一节课换了：</p>
<ul>
<li>有k[i-1]的概率从d[i-1]赶来</li>
<li>有(1-k[i-1])的概率从c[i-1]赶来</li>
</ul>
<p>上一节课没换：</p>
<ul>
<li>从c[i-1]赶来</li>
</ul>
<p>最后的答案就是 min{f[n][i][0], f[n][i][1] | 0≤i≤m}<br>
预处理最短路：<br>
时间复杂度 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">V^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>)<br>
DP状态数 O(nm)，转移 O(1)，时间复杂度 O(nm)<br>
由于 f[i] 由 f[i-1] 转移过来，可以使用滚动数组优化空间。空间复杂度 O(m)</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const double INF=1e9;
const int N=2010,M=310;
int c[N],d[N];
double k[N];
int dist[N][N];
double f[2][N][2];//f[i][j][0/1]表示前i节课用来j次换教室的机会，上节课换/没换 
int n,m,v,e;

void floyd()
{
    for(int k=1;k&lt;=v;k++)
        for(int i=1;i&lt;=v;i++)
            for(int j=1;j&lt;=v;j++)
                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m&gt;&gt;v&gt;&gt;e;
    for(int i=1;i&lt;=n;i++)
        cin&gt;&gt;c[i];
    for(int i=1;i&lt;=n;i++)
        cin&gt;&gt;d[i];
    for(int i=1;i&lt;=n;i++)
        cin&gt;&gt;k[i];

    memset(dist,0x3f,sizeof dist);
    for(int i=1;i&lt;=v;i++) dist[i][i]=0;//初始化为0，因为可能通过换教室使得下节课教室不变
    while(e--)
    {
        int a,b,c;
        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
        dist[a][b]=dist[b][a]=min(dist[a][b],c);
    }

    floyd();

    for(int j=0;j&lt;=m;j++)
        f[0][j][0]=f[0][j][1]=f[1][j][0]=f[1][j][1]=INF;

    f[1][0][0]=f[1][1][1]=0;
    for(int i=2;i&lt;=n;i++)
        for(int j=0;j&lt;=m;j++)
        {
            //这节不换,上节换/不换 
            f[i&amp;1][j][0]=min(f[i-1&amp;1][j][0]+dist[c[i-1]][c[i]],
                            f[i-1&amp;1][j][1]+k[i-1]*dist[d[i-1]][c[i]]+
                            (1-k[i-1])*dist[c[i-1]][c[i]]);

            //这节换，上节换/不换
            if(j)
            f[i&amp;1][j][1]=min(f[i-1&amp;1][j-1][0]+dist[c[i-1]][c[i]]*(1-k[i])+
                            dist[c[i-1]][d[i]]*k[i],
                            f[i-1&amp;1][j-1][1]+(1-k[i-1])*dist[c[i-1]][c[i]]*(1-k[i])+
                            (1-k[i-1])*dist[c[i-1]][d[i]]*k[i]+
                            k[i-1]*dist[d[i-1]][c[i]]*(1-k[i])+
                            k[i-1]*dist[d[i-1]][d[i]]*k[i]);    
        }

    double ans=INF;
    for(int i=0;i&lt;=m;i++)
        ans=min(ans,min(f[n&amp;1][i][0],f[n&amp;1][i][1]));

    printf(&quot;%.2f\n&quot;,ans);

    return 0;

}
</code></pre>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2294">hdu2294</a><br>
你有 k 种珍珠，想用它们组成一个长度在1～n之间的一条首饰并且满足 k 种珍珠都至少出现一次。<br>
问有多少种不同的首饰。n ≤ 1e9, k ≤ 30<br>
样例：<br>
n = 3, k = 2<br>
答案：8（ab,ba,aab,aba,abb,baa,bab,bba)</p>
<p>用 f[i][j] 表示现在拼出了长度为 i 的序列，用了 j 种珍珠。<br>
决策是第 i 个珍珠是否使用新的种类：<br>
如果是旧的，那么有 j 种可能： j * f[i-1][j]<br>
如果是新的，那么有 k-j+1 种可能：(k-j+1)*f[i-1][j-1]<br>
因此我们得到了：<br>
f[i][j] = j * f[i - 1][j] + (k - j + 1) * f[i - 1][j - 1];</p>
<p>答案就是 f[0][k] + f[2][k] + … + f[n][k]<br>
由于 n 特别大，我们只能考虑矩阵乘法优化。<br>
显然 f[i] 都是由 f[i - 1] 转移过来的。</p>
<p>那么我们可以把 f[i] 看作是一个长度为 k + 1 的向量。<br>
[ f[i][0], f[i][1], …, f[i][k] ]<br>
然后就可以构造转移矩阵 A。<br>
这样 f[i] = f[i-1] * A</p>
<p>f[n] = f[0] * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">A^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><br>
f[n - 1] = f[0] * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> …<br>
f[0]=[ 1, 0, 0,.., 0]<br>
因此我们需要计算出 f[0] * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>I</mi><mo>+</mo><mi>A</mi><mo>+</mo><msup><mi>A</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>+</mo><msup><mi>A</mi><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">(I + A + A^2 + … + A^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
这是一个经典问题，二分 + 矩阵快速幂即可解决。</p>
<p>a.data[0][k] 即为答案。(相当于f[0][k] + f[2][k] + … + f[n][k])<br>
时间复杂度 O(k^3log n)</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long LL;
const int N=35,mod=1234567891;
struct matrix
{
	int m[N][N];
	matrix()
	{
		memset(m,0,sizeof m);
	}
};
int n,k;

matrix add(matrix a,matrix b)
{
	matrix c;
	for(int i=0;i&lt;=k;i++)
		for(int j=0;j&lt;=k;j++)
			c.m[i][j]=((LL)a.m[i][j]+b.m[i][j])%mod;
	return c;
}

matrix mul(matrix a,matrix b)
{
	matrix c;
	for(int i=0;i&lt;=k;i++)
		for(int j=0;j&lt;=k;j++)
			for(int t=0;t&lt;=k;t++)
				c.m[i][j]=(c.m[i][j]+(LL)a.m[i][t]*b.m[t][j])%mod;
	
	return c;
}

matrix qmi(matrix a,int b)
{
	matrix c;
	for(int i=0;i&lt;=k;i++)
		c.m[i][i]=1;
		
	while(b)
	{
		if(b &amp; 1) c=mul(c,a);
		a=mul(a,a);
		b&gt;&gt;=1;
	}
	
	return c;
}

matrix sum(matrix a,int b)
{
	if(b == 1) return a;
	matrix c;
	for(int i=0;i&lt;=k;i++)
		c.m[i][i]=1;
	
	c=add(c,qmi(a,b&gt;&gt;1));
	c=mul(c,sum(a,b&gt;&gt;1));
	if(b &amp; 1) c=add(c,qmi(a,b));
	
	return c;
}

int main()
{
	int T;
	cin&gt;&gt;T;
	while(T--)
	{
		scanf(&quot;%d%d&quot;,&amp;n,&amp;k);
		
		matrix a;
		for(int i=0;i&lt;=k;i++)
		{
			a.m[i][i]=i;
			a.m[i-1][i]=k-i+1;
		}	

		a=sum(a,n);

		printf(&quot;%d\n&quot;,a.m[0][k]);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[状压dp]]></title>
        <id>https://caifxh.github.io/post/zhuang-ya-dp/</id>
        <link href="https://caifxh.github.io/post/zhuang-ya-dp/">
        </link>
        <updated>2020-04-01T09:12:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="棋盘类基于连通性状压dp">棋盘类（基于连通性）状压dp</h3>
<h4 id="1十字型">1.十字型</h4>
<p><a href="https://www.acwing.com/problem/content/329/">玉米田</a></p>
<h4 id="输入样例">输入样例：</h4>
<pre><code>2 3
1 1 1
0 1 0
</code></pre>
<h4 id="输出样例">输出样例：</h4>
<pre><code>9
</code></pre>
<p>用二进制数来描述一行中方格的状态，1表示种玉米，0表示不种玉米<br>
样例第一行有以下5种种玉米的方案<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/12/9969_861e7ce04d-101.PNG" alt="101.PNG" loading="lazy"><br>
根据题意，把每一行的状态用二进制的数表示，0代表不在这块放牛，1表示在这一块放牛。首先很容易看到，每一行的状态要符合牧场的硬件条件，即牛必须放在能放牧的方格上。这样就能排除一些状态。另外，牛与牛之间不能相邻，这样就要求每一行中不能存在两个相邻的1，这样也能排除很多状态。然后就是根据上一行的状态转移到当前行的状态的问题了。必须符合不能有两个1在同一列（两只牛也不能竖着相邻）的条件。这样也能去掉一些状态。然后，上一行的所有符合条件的状态的总的方案数就是当前行该状态的方案数。</p>
<p>（1）初始化所有合法状态，即找没有相邻1的二进制数。用state[]存储合法状态<br>
（2）枚举不同合法状态之间的转移关系，只要a&amp;b == 0,状态a就可转到b<br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_730aad4a74-51.png" alt="51.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;bitset&gt;
using namespace std;
const int N=15,M=1&lt;&lt;12,mod=1e8;
int f[N][M];
int g[N];
int n,m;
vector&lt;int&gt; state;
vector&lt;int&gt; head[M];

bool check(int state)//判断相邻两列
{
    if(state &amp; state&lt;&lt;1)
        return false;
    return true;
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    
    for(int i=1;i&lt;=n;i++)
        for(int j=0;j&lt;m;j++)
        {
            int x;
            cin&gt;&gt;x;//若x为1，表示玉米田不可用
            g[i]+=!x&lt;&lt;(m-1-j);
        }

    for(int i=0;i&lt;1&lt;&lt;m;i++)
        if(check(i))
            state.push_back(i);//所有合法状态
    
    f[0][0]=1;//边界
    for(int i=1;i&lt;=n+1;i++)//枚举到第n+1行，省略求和
        for(int a=0;a&lt;state.size();a++)//第i行状态为a，i-1行状态为b
            for(int b=0;b&lt;state.size();b++)
            {
                if((g[i] &amp; state[a]) == 0 &amp;&amp; (state[a] &amp; state[b]) == 0) //不与上一行冲突，且不能在地图上0的地方种玉米
                    f[i][a]=(f[i][a]+f[i-1][b])%mod;
                }
    
    cout&lt;&lt;f[n+1][0]&lt;&lt;endl;
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/294/">炮兵阵地</a><br>
状态：f[i][j][k],已经摆完前i行，第i行状态是j，第i-1行状态是k的摆放方案<br>
属性： max<br>
划分依据，<br>
第i行状态不仅和第i-1行状态有关，还和第i-2行状态有关,所有f[i][j][k]第i行状态是j，第i-1行状态是k，依据i-2行状态来划分。<br>
a表示第i行状态，b表示第i-1行状态，c表示第i-2行状态<br>
要求：<br>
（1）每行的意大利炮不能相互攻击到，((a &amp; b) || (a &amp; c) || (a &amp; b))==0<br>
（2）意大利炮只能放在平地上,(g[i] &amp; a )||(g[i-1] &amp; b),无需判断g[i-2]行，若g[i-2]行意大利炮放到了山地上属于不合法状态，一定为0<br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_8df3199474-52.png" alt="52.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/04/02/9969_923b747474-53.png" alt="53.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;
const int N=110,M=1&lt;&lt;10;//n的范围远大于m的范围，以列作为枚举的状态
int g[N];
int cnt[M];//状态对应的1的个数
vector&lt;int&gt; state;
int n,m;
int f[2][M][M];//f[i,j,k] 第i行状态是j，第i-1行状态是k

bool check(int state)
{
    if((state &amp; state&lt;&lt;1) || (state &amp; state&lt;&lt;2))
        return false;
    return true;
}

int count(int state)
{
    int res=0;
    for(int i=0;i&lt;m;i++)
        if(state&gt;&gt;i &amp;1)
            res++;
    return res;
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    
    for(int i=1;i&lt;=n;i++)
        for(int j=0;j&lt;m;j++)
        {
            char c;
            cin&gt;&gt;c;
            if(c == 'H')
                g[i]+=1&lt;&lt;(m-1-j);
        }
        
    for(int i=0;i&lt;1&lt;&lt;m;i++)
    {
        if(check(i))
        {
            state.push_back(i);
            cnt[i]=count(i);
        }
    }
    //f[i,j,k] 已经摆完前i行，第i行状态是j，第i-1行状态是k
    for(int i=1;i&lt;=n+2;i++)
        for(int j=0;j&lt;state.size();j++)
            for(int k=0;k&lt;state.size();k++)
                for(int u=0;u&lt;state.size();u++)
                {
                    int a=state[j],b=state[k],c=state[u];//a表示第i行状态，b表示第i-1行状态，c表示第i-2行状态
                    if((a &amp; b) || (a &amp; c) || (a &amp; b))//相邻两行不能相互攻击到
                        continue;
                    if((g[i] &amp; a )||(g[i-1] &amp; b))//意大利炮不能放山地上
                        continue;
                    f[i&amp;1][a][b]=max(f[i&amp;1][a][b],f[i-1&amp;1][b][c]+cnt[a]);
                }
                
    cout&lt;&lt;f[n+2&amp;1][0][0]&lt;&lt;endl;
    return 0;
}
</code></pre>
<h4 id="2井字型">2.井字型</h4>
<p><a href="https://www.acwing.com/problem/content/1066/">骑士</a><br>
状态：f[i][j][k],已经摆完前i行，第i行摆放状态是j（二进制位为1表示摆放，0表示不摆），已经摆了k个<br>
属性：count<br>
状态划分：<br>
要求：国王不能左右相邻，不能上下相邻，不能对角相邻，第i行状态为a，i-1行状态为b<br>
（1）每行内部不能有两个1相邻,（预处理）<br>
（2）第i行和第i-1行状态不能相互攻击到，(a &amp; b) == 0 ,a|b不能有两个相邻的1</p>
<pre><code>//第i行状态只跟第i-1行状态有关
#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;
const int N=12,M=1&lt;&lt;10,K=110;
typedef long long LL;
LL f[N][M][K];
vector&lt;int&gt; state;
int cnt[M];//每个状态对应1的数目
int n,m;

bool check(int state)
{
    for(int i=0;i&lt;n;i++)
    {
        if((state&gt;&gt;i &amp;1) &amp;&amp; (state&gt;&gt;i+1 &amp;1))
            return false;
    }
    return true;
}

int count(int state)
{
    int res=0;
    for(int i=0;i&lt;n;i++)    
        res+=state&gt;&gt;i &amp;1;
    return res;
}

int main()
{
    
    cin&gt;&gt;n&gt;&gt;m;
    
    for(int i=0;i&lt;1&lt;&lt;n;i++)//如果满足左右互不相邻，则存储当前状态
        if(check(i))
        {
            state.push_back(i);
            cnt[i]=count(i);
        }
    //cout&lt;&lt;state.size()&lt;&lt;endl;
    f[0][0][0]=1;
    for(int i=1;i&lt;=n+1;i++)
        for(int a=0;a&lt;state.size();a++) 
            for(int k=0;k&lt;=m;k++)
                for(int b=0;b&lt;state.size();b++)
                {
                    int sa=state[a],sb=state[b];//sa表示第i行状态,sb表示第i-1行状态
                    if((sa &amp; sb) == 0 &amp;&amp; check(sa|sb))
                    {
                        int c=cnt[sa];
                        //cout&lt;&lt;sa&lt;&lt;' '&lt;&lt;sb&lt;&lt;' '&lt;&lt;k&lt;&lt;' '&lt;&lt;c&lt;&lt;endl;
                        if(k&gt;=c)
                            f[i][sa][k]+=f[i-1][sb][k-c];
                    }
                }
    
    cout&lt;&lt;f[n+1][0][m]&lt;&lt;endl;
    return 0;
}
</code></pre>
<h4 id="3插头型">3.插头型</h4>
<p><a href="https://www.acwing.com/problem/content/293/">蒙德里安的梦想</a><br>
考虑决策——骨牌的放法：横着 或者 竖着。</p>
<p>如果横着：<br>
需要两个连续的空位，并且上一行的这两个位置也得已经被覆盖。</p>
<p>如果竖着：<br>
(a) 上一行对应的位置是空的，我们把那个空填上。<br>
(b) 上一行对应的位置是被覆盖的，那么我们把这一行的位置设为空，表示下一行的对应位置必须竖放，填上这块空白</p>
<p>状态表示：f[i][j],表示第i行的形态为j时的摆放方案数量<br>
j是用十进制记录的m位二进制数，其中第k（0&lt;=k&lt;m）位为1表示第k列是一个竖着的1*2的长方形的上面一半。</p>
<blockquote>
<p>记第i-1行状态为k，第i行状态为j<br>
k能转移到j，当且仅当：<br>
(1)j和k执行按位与为0，保证每个数字1下必须是0，才得以补全1<em>2的长方形<br>
(2)j和k执行按位或的结果，连续的0必须是偶数。这些0表示若干横着的1</em>2长方形，奇数个0无法满足这种摆放形态。</p>
</blockquote>
<h4 id="可以预处理出02m-1内所有满足连续的0必须是偶数的整数">可以预处理出[0,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span>-1]内所有满足连续的0必须是偶数的整数</h4>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N = 12, M = 1 &lt;&lt; N;
int st[M];
long long f[N][M];

int main()
{
    int n, m;
    while (cin &gt;&gt; n &gt;&gt; m &amp;&amp; n)
    {

        for (int i = 0; i &lt; 1 &lt;&lt; m; i ++)
        {
            int cnt = 0;// cnt 为当前已经存在多少个连续的0
            st[i] = true;
            for (int j = 0; j &lt; m; j ++)
                if (i &gt;&gt; j &amp; 1)
                {
                    if (cnt &amp; 1) //当前位为1，上一段连续为0的位置已结束
                        st[i] = false; 
                    cnt = 0;
                }
                else cnt ++;
            if (cnt &amp; 1) st[i] = false; // 扫完后要判断一下最后一段有多少个连续的0
        }
    
        memset(f, 0, sizeof f);
        f[0][0] = 1;
        for (int i = 1; i &lt;= n; i ++)
            for (int j = 0; j &lt; 1 &lt;&lt; m; j ++)
                for (int k = 0; k &lt; 1 &lt;&lt; m; k ++)
                    if ((j &amp; k) == 0 &amp;&amp; (st[j | k])) 
                    // j &amp; k == 0 表示 i 行和 i-1 行不能同时捅出来
                    // st[j | k] == 1 表示 在 i 列状态 j， i - 1 列状态 k 的情况下（连续的0必须有偶数个）是合法的.
                        f[i][j] += f[i - 1][k];      
        cout &lt;&lt; f[n][0] &lt;&lt; endl;
    }
    return 0;
}

</code></pre>
<blockquote></blockquote>
<h3 id="集合类每个元素是否在集合里面状压dp">集合类（每个元素是否在集合里面）状压dp</h3>
<p><a href="https://www.acwing.com/problem/content/93/">最短Hamilton路径</a><br>
给定一张 n 个点的带权无向图，点从 0~n-1 标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。<br>
状态表示：dp[i][j] ：所有从0走到j，走过的所有点的状态是i的最短路径<br>
状态划分：<br>
dp[i][j]表示所有从0走到j，当前已经走过点的为i的集合。所以这个状态转移方程就是找一个中间点k，将已经走过点的集合i中去除掉j（表示j不在经过的点的集合中），然后再加上从k到j的权值。问题在于如何表达已经走过点的集合i，其实很简单，假如走过0,1,4这三个点，我们用二进制10011就可以表示，2,3没走过所以是0。<br>
那么走过点的集合i中去除掉点j也很容易表示i - (1 &lt;&lt; j)，比方说i是{0,1,4}，j是1，那么i = 10011，(1 &lt;&lt; j) = 10，i - (1 &lt;&lt; j) = 10001<br>
那么问题的答案就应该是dp[01....111][n-1]，表示0~n-1都走过，且当前移动到n-1这个点。<br>
下时间复杂度：<br>
n为20的时候，外层循环(1&lt;&lt;20)，内层循环20，所以整体时间复杂度O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>20</mn><mi mathvariant="normal">∗</mi><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">20∗2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">∗</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>)，这比O(n∗n!)快多了</p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 20, M = 1 &lt;&lt; N;

int n;
int w[N][N];
int f[M][N];

int main()
{
    cin &gt;&gt; n;
    for (int i = 0; i &lt; n; i ++ )
        for (int j = 0; j &lt; n; j ++ )
            cin &gt;&gt; w[i][j];

    memset(f, 0x3f, sizeof f);
    f[1][0] = 0;//第一个点是不需要任何费用的
    /*
    注意循环顺序
    如果反过来写，不能保证在f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + w[k][j])中右边的状态在左边的状态之前被计算出来。
    */
    for (int i = 0; i &lt; 1 &lt;&lt; n; i ++ )//i代表着是一个方案集合，其中每一个位置1和0，代表着这个点经过还是没有经过
        for (int j = 0; j &lt; n; j ++ )//枚举当前到了哪一个点
            if (i &gt;&gt; j &amp; 1)//如果i集合中第j位是1，也就是到达过这个点
                for (int k = 0; k &lt; n; k ++ )//枚举到达j的点k
                    if (i &gt;&gt; k &amp; 1)
                        f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + w[k][j]);

    cout &lt;&lt; f[(1 &lt;&lt; n) - 1][n - 1];

    return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=2288">poj2288</a><br>
题意：<br>
给出n个点，m条边的无向图，给出每个点的点权，求点权和最小的哈密顿路径，相邻两个点要加上点权的乘积，形成环要加上环上的点权<br>
这题先占个坑，以后补。。。。</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1074">hdu1074</a><br>
题意：<br>
给了n个家庭作业，然后给了每个家庭作业的完成期限和花费的实践，如果完成时间超过了期限，那么就要扣除分数，然后让你找出一个最优方案使扣除的分数最少，当存在多种方案时，输出字典序最小的那种，因为题意已经说了家庭作业的名字是按照字典序从小到大输入的，所以处理起来就好多了。</p>
<h4 id="思路">思路</h4>
<p>在引出正解前，我们从DFS开始引入，如果这题用DFS来写，想必大家都有思路，很好理解。因为每个作业要么写，要么不写，因此开个布尔数组搜就行了，而且这题n &lt;= 15;仔细想来，加点剪枝还是可以过的没准。<br>
如果我们把布尔数组看成一个二进制位，进行状态压缩，很明显可以知道，最多只有2的15次方位的1二进制大小的状态。因此可以用2进制所对应的10进制来表示状态，这就是状态压缩。<br>
状态表示:dp[i]记录完成作业状态为i时的最少损失的分数。<br>
状态划分：<br>
1.状态a能做第i号作业的条件是a中作业i尚未完成，即a&amp;i=0。<br>
2.若有两个状态dp[a],dp[b]都能到达dp[i],那么选择能使到达i扣分小的那一条路径，若分数相同，转入3<br>
3.这两种状态扣的分数相同，那么选择字典序小的，由于作业按字典序输入，故即dp[i].pre = min(a,b);<br>
最后dp[2^n-1]即为最少扣分，课程安排可递归的输出</p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;bitset&gt;
using namespace std;
const int N=20,M=1&lt;&lt;15;
const int INF=0x3f3f3f3f;
struct
{
    char sbj[110];
	int deadline;
	int fintime;
}w[N];
int dp[M];//dp[i]表示当前写作业状态是i的情况下被扣分的最小值 
int pre[M];//记录前驱 
int day[M];//记录当前写作业状态是i的情况下已经过了多少天 
int n;

void print_path(int state)
{
    if(state==0)return;
    int t=0;
    for(int i=0;i&lt;n;i++)
      if( (state&amp;(1&lt;&lt;i))!=0 &amp;&amp; (pre[state]&amp;(1&lt;&lt;i))==0 )
      {
          t=i;
          break;//按字典序最小输出，由于输入时已按字典序输入，找到第一个满足的break 
      }
    print_path(pre[state]);
    cout&lt;&lt;w[t].sbj&lt;&lt;endl;
}

int main()
{
    int T;
    scanf(&quot;%d&quot;,&amp;T);
    while(T--)
    {
        scanf(&quot;%d&quot;,&amp;n);
        for(int i=0;i&lt;n;i++)
          scanf(&quot;%s%d%d&quot;,&amp;w[i].sbj,&amp;w[i].deadline,&amp;w[i].fintime);
        memset(dp,0x3f,sizeof dp);
        memset(day,0,sizeof day); 
        dp[0]=0;//当前还未做作业时被扣分为0 
        for(int i=0;i&lt;1&lt;&lt;n;i++)
        {
        	//cout&lt;&lt;(bitset&lt;3&gt;(i))&lt;&lt;&quot; : &quot;&lt;&lt;endl;
            for(int j=0;j&lt;n;j++)
            {
                if(i&amp;(1&lt;&lt;j))continue;//第j位为1，表示第j位上的作业已完成，continue 
                int today=0;
//                for(int k=0;k&lt;n;k++)
//                  if(i&amp;(1&lt;&lt;k))
//                     today+=w[k].fintime;
//                today+=w[j].fintime;
				today=day[i]+w[j].fintime;//today表示今天是第几天 
				int score=0; 
                if(today&gt;w[j].deadline) 
					score=today-w[j].deadline;//完成日期与截止日期的差值 ，若差值&lt;0,则不需扣分 
                if(dp[i|(1&lt;&lt;j)]&gt;dp[i]+score)
                {
                    dp[i|(1&lt;&lt;j)]=dp[i]+score;
                    day[i|1&lt;&lt;j]=day[i]+w[j].fintime;
                    //cout&lt;&lt;&quot;--&quot;&lt;&lt;(bitset&lt;3&gt;(i|(1&lt;&lt;j)))&lt;&lt;' '&lt;&lt;dp[i|(1&lt;&lt;j)]&lt;&lt;endl;
                    pre[i|(1&lt;&lt;j)]=i;
                }
            }
            //cout&lt;&lt;endl;
        }
        printf(&quot;%d\n&quot;,dp[(1&lt;&lt;n)-1]);
        print_path((1&lt;&lt;n)-1);
    }
    return 0;
}
</code></pre>
<h4 id="旅行商问题tsp">旅行商问题(TSP)，</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/13/9969_0b0799de4e-lxs.PNG" alt="lxs.PNG" loading="lazy"><br>
TSP问题是NP难度的，没有多项式时间的高效算法。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_1125f75e4e-2221.png" alt="2221.png" loading="lazy"><br>
假设最短的TSP路径是path=（v0-&gt;v1-&gt;v2-&gt;v3-&gt;v4-&gt;v0）</p>
<h4 id="那么pathv0-v1v1-v2-v3-v0">那么path=(v0-&gt;v1)+(v1-&gt;v2-&gt;v3-&gt;v0)</h4>
<h4 id="所以问题转变为求经过所有城市的最短回路-从某个城市回到起点的最短路径">所以问题转变为：求经过所有城市的最短回路-&gt;从某个城市回到起点的最短路径</h4>
<p>DP状态：假设已经访问过的城市集合是S（已访问为1，未访问为0），当前所在城市是u，用dp[S][u]表示从u出发访问剩余的所有城市最后回到<strong>起点</strong>的路径费用总和的最小值。<br>
状态转移方程：<br>
dp[S][u]=min(dp[S∪{v}][v]+dist(u,v)|v∉S}<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/13/9969_63474b444e-%E5%9B%BE%E7%89%872.png" alt="图片2.png" loading="lazy"></p>
<h4 id="临界条件如果递推的话是起点递归的话是终点">临界条件如果递推的话是起点，递归的话是终点</h4>
<pre><code>#include&lt;cstring&gt;//递推，输出路径 
#include&lt;bitset&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int INF=0x3f3f3f3f;
int dp[1&lt;&lt;15][15];//dp[S][u]:S表示已经过的节点，从u出发走完所有剩余顶点回到起点的最短距离
int g[15][15];
int path[1&lt;&lt;15][15];//最优路径
int n,m; //n个节点，m条边

void Init()
{
    memset(dp,0x3f,sizeof(dp));
    memset(g,0x3f,sizeof(g));
    memset(path,-1,sizeof(path));
}

void Traveling()//计算dp[S][u]
{
    dp[(1&lt;&lt;n)-1][0]=0;//注意：1&lt;&lt;n一定要加括号 
	for(int S=(1&lt;&lt;n)-2;S&gt;=0;S--)
        for(int u=0;u&lt;n;u++)
            for(int v=0;v&lt;n;v++)
			{//u可以等于0,起点0可看做已访问（从起点0出发回到起点0） 
            	if((u!=0&amp;&amp;!(S&gt;&gt;u&amp;1))||g[u][v]==INF) continue;，//若 u!=0，则u必须已访问 
				if(!(S&gt;&gt;v&amp;1)&amp;&amp;dp[S][u]&gt;dp[S|1&lt;&lt;v][v]+g[u][v])
                {
                    dp[S][u]=dp[S|1&lt;&lt;v][v]+g[u][v];
                    cout&lt;&lt;&quot;S=&quot;&lt;&lt;(bitset&lt;5&gt;(S))&lt;&lt;&quot;\t   u=&quot;&lt;&lt;u&lt;&lt;&quot;\tv=&quot;&lt;&lt;v&lt;&lt;&quot;\tdp[&quot;&lt;&lt;(bitset&lt;5&gt;(S))&lt;&lt;&quot;][&quot;&lt;&lt;u&lt;&lt;&quot;]=&quot;;
					cout&lt;&lt;&quot;dp[&quot;&lt;&lt;(bitset&lt;5&gt;(S|1&lt;&lt;v))&lt;&lt;&quot;][&quot;&lt;&lt;v&lt;&lt;&quot;]+&quot;&lt;&lt;g[u][v]&lt;&lt;&quot;=&quot;&lt;&lt;dp[S][u]&lt;&lt;endl;
                    path[S][u]=v;//记录后继节点
                }
        	}
}

void print(int S,int u)//打印路径
{
    if(S==(1&lt;&lt;n)-1) return;
    int v=path[S][u];//u的后继v
    cout&lt;&lt;&quot;---&gt;&quot;&lt;&lt;v;
	print(S|1&lt;&lt;v,v);//将v加入已走过的节点集合，再从v出发
}

int main()
{
	int u,v,w;//u,v代表城市，w代表u和v城市之间路的长度
    cin&gt;&gt;n&gt;&gt;m;
    Init();
    for(int i=0;i&lt;m;i++)
    {
       cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;
       //g[u][v]=g[v][u]=w;//无向图 
       g[u][v]=w;//有向图 
    }
    Traveling();
    cout&lt;&lt;&quot;最短路径: &quot;&lt;&lt;0;
    print(0,0);
    cout&lt;&lt;endl;
    cout&lt;&lt;&quot;最短路径长度:&quot;&lt;&lt;dp[0][0]&lt;&lt;endl;
    return 0;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_2800cfd84e-115.PNG" alt="115.PNG" loading="lazy"></figure>
<pre><code>#include&lt;cstring&gt;//记忆化递归，输出路径 
#include&lt;bitset&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int INF=0x3f3f3f3f;
int dp[1&lt;&lt;15][15];//dp[S][u]:S表示已经过的节点，从u出发走完所有剩余顶点回到起点的最短距离
int g[15][15];
int path[1&lt;&lt;15][15];//最优路径
int n,m; //n个节点，m条边

void Init()
{
    memset(dp,-1,sizeof(dp));
    memset(g,0x3f,sizeof(g));
    memset(path,-1,sizeof(path));
}

int Traveling(int S,int u)//计算dp[S][u],记忆化递归 
{
    if(dp[S][u]&gt;=0)
    	return dp[S][u];
	if(S==(1&lt;&lt;n)-1&amp;&amp;u==0)
		return dp[S][u]=0;//递归结束条件
    int ans=INF;
	for(int v=0;v&lt;n;v++)
		if(!(S&gt;&gt;v&amp;1)&amp;&amp;g[u][v]!=INF)
		{
			int tmp=Traveling(S|1&lt;&lt;v,v)+g[u][v];
			if(ans&gt;tmp)
			{
				ans=tmp;
				cout&lt;&lt;&quot;S=&quot;&lt;&lt;(bitset&lt;5&gt;(S))&lt;&lt;&quot;\t   u=&quot;&lt;&lt;u&lt;&lt;&quot;\tv=&quot;&lt;&lt;v&lt;&lt;&quot;\tdp[&quot;&lt;&lt;(bitset&lt;5&gt;(S))&lt;&lt;&quot;][&quot;&lt;&lt;u&lt;&lt;&quot;]=&quot;;
				cout&lt;&lt;&quot;dp[&quot;&lt;&lt;(bitset&lt;5&gt;(S|1&lt;&lt;v))&lt;&lt;&quot;][&quot;&lt;&lt;v&lt;&lt;&quot;]+&quot;&lt;&lt;g[u][v]&lt;&lt;&quot;=&quot;&lt;&lt;ans&lt;&lt;endl;
				path[S][u]=v;//记录后继节点
			}		
		}
    return dp[S][u]=ans;
}

void print(int S,int u)//打印路径
{
    if(S==(1&lt;&lt;n)-1) return;
    int v=path[S][u];//u的后继v
    cout&lt;&lt;&quot;---&gt;&quot;&lt;&lt;v;
	print(S|1&lt;&lt;v,v);//将v加入已走过的节点集合，再从v出发
}

int main()
{
	int u,v,w;//u,v代表城市，w代表u和v城市之间路的长度
    cin&gt;&gt;n&gt;&gt;m;
    Init();
    for(int i=0;i&lt;m;i++)
    {
       cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;
       //g[u][v]=g[v][u]=w;
       g[u][v]=w;
    }
    Traveling(0,0);
    cout&lt;&lt;&quot;最短路径: &quot;&lt;&lt;0;
    print(0,0);
    cout&lt;&lt;endl;
    cout&lt;&lt;&quot;最短路径长度:&quot;&lt;&lt;dp[0][0]&lt;&lt;endl;
    return 0;
}
</code></pre>
<h4 id="例题">例题</h4>
<p><a href="http://poj.org/problem?id=3311">poj3311</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_c0342f484e-poj.png" alt="poj.png" loading="lazy"></p>
<h4 id="思路-2">思路</h4>
<p>由于题中明确说了两个城市间的直接可达路径（即不经过其它城市结点）不一定是最短路径，所以需要借助邻接矩阵首先求出任意两个城市间的最短距离（因为这里的点可以多次遍历，并没有次数限制，所以才能用floyd的，如果有次数限制x的话，就不能用floyd预处理，而应该用x进制的状态压缩了）。这一步骤使用Floyd最短路径算法即可。然后，在此基础上来求出遍历各个城市后回到出发点的最短路径的距离，即求解TSP问题。</p>
<pre><code>//求走过所有点并回到原点的最短路,可以走一个点多次.
//因为可以走一个点多次，所以，可以先求出每两个点之间的最短路，然后用经典的旅行商问题的状态压缩DP做法。
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=12,M=1&lt;&lt;11,INF=0x3f3f3f3f;
int n;
int g[N][N];
int dp[M][N];

void Init()
{
    memset(dp,-1,sizeof(dp));
    memset(g,0x3f,sizeof(g));
}

void floyd()
{
    for(int k=0;k&lt;n;k++)
        for(int i=0;i&lt;n;i++)
            for(int j=0;j&lt;n;j++)
                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);
}

int Tsp(int S,int u)//计算dp[S][u],记忆化递归 
{
	if(dp[S][u]&gt;=0)
    	return dp[S][u];
	if(S==(1&lt;&lt;n)-1&amp;&amp;u==0)//递归结束条件
		return dp[S][u]=0;
    int ans=INF;
	for(int v=0;v&lt;n;v++)
		if(!(S&gt;&gt;v&amp;1)&amp;&amp;g[u][v]!=INF)
			ans=min(ans,Tsp(S|1&lt;&lt;v,v)+g[u][v]);
    return dp[S][u]=ans;
}

int main()
{
    while(~scanf(&quot;%d&quot;,&amp;n),n)
    {
        n++;//源点0加上 
		Init();
        for(int i=0;i&lt;n;i++)
            for(int j=0;j&lt;n;j++)
                scanf(&quot;%d&quot;,&amp;g[i][j]);
        floyd();
        printf(&quot;%d\n&quot;,Tsp(0,0));
    }
    return 0;
}
</code></pre>
<p>递推</p>
<pre><code>//求走过所有点并回到原点的最短路,可以走一个点多次.
//因为可以走一个点多次，所以，可以先求出每两个点之间的最短路，然后用经典的旅行商问题的状态压缩DP做法。
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=12,M=1&lt;&lt;11,INF=0x3f3f3f3f;
int n;
int g[N][N];
int dp[M][N];

void Init()
{
    memset(dp,0x3f,sizeof(dp));//递推时初始化为INF，记忆化递归初始化为-1 
    memset(g,0x3f,sizeof(g));
}

void floyd()
{
    for(int k=0;k&lt;n;k++)
        for(int i=0;i&lt;n;i++)
            for(int j=0;j&lt;n;j++)
                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);
}

void Tsp()//计算dp[S][u]
{
    dp[(1&lt;&lt;n)-1][0]=0;//注意：1&lt;&lt;n一定要加括号 
	for(int S=(1&lt;&lt;n)-2;S&gt;=0;S--)
        for(int u=0;u&lt;n;u++)
            for(int v=0;v&lt;n;v++)
			{
            	if((u!=0&amp;&amp;!(S&gt;&gt;u&amp;1))||g[u][v]==INF) continue;//可以加约束条件，不加状态多 
				if(!(S&gt;&gt;v&amp;1))
                    dp[S][u]=min(dp[S][u],dp[S|1&lt;&lt;v][v]+g[u][v]);
        	}
}

int main()
{
    while(~scanf(&quot;%d&quot;,&amp;n),n)
    {
        n++;//加上源点 
		Init();
        for(int i=0;i&lt;n;i++)
            for(int j=0;j&lt;n;j++)
                scanf(&quot;%d&quot;,&amp;g[i][j]);
        floyd();
		Tsp();
        printf(&quot;%d\n&quot;,dp[0][0]);
    }
    return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=2686">poj2686</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_9fa870324f-2686.png" alt="2686.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_ae8bd9ea4f-268.png" alt="268.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_ce1e0b0c4f-2681.png" alt="2681.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_d30d5e064f-2688.png" alt="2688.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_59ec7a564f-26888.png" alt="26888.png26882.png " loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_8ec6bde04f-26882.png" alt="26882.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=10,M=35,INF=0x3f3f3f3f;
int n,m,p,a,b;
int t[N];
int g[M][M];
double dp[1&lt;&lt;8][M];//d[S][u],所用车票状态是S,从起点走到点u所需的最短时间 

int main()
{
	while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;p&gt;&gt;a&gt;&gt;b &amp;&amp; n)
	{
		for(int i=0;i&lt;n;i++)
			cin&gt;&gt;t[i];
		memset(g,0x3f,sizeof g);
		while(p--)
		{
			int a,b,c;
			cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
			g[a][b]=g[b][a]=c;
		}
		//memset(dp,0x3f,sizeof(dp));//double不可以memset 
	    for(int i=0;i&lt;1&lt;&lt;n;i++)
	    	fill(dp[i]+1,dp[i]+m+1,INF);
	//	for(int i=0;i&lt;1&lt;&lt;n;i++)
	//		for(int j=1;j&lt;=m;j++)
	//			dp[i][j]=INF;
		dp[(1&lt;&lt;n)-1][a]=0;
		double ans=INF;
		for(int S=(1&lt;&lt;n)-1;S&gt;=0;S--)//状态 
		{
			for(int u=1;u&lt;=m;u++)//城市 
				for(int i=0;i&lt;n;i++)//车票 
					if(S&gt;&gt;i &amp; 1)
						for(int v=1;v&lt;=m;v++)//城市 
							if(g[u][v] != INF)
								dp[S-(1&lt;&lt;i)][v]=min(dp[S-(1&lt;&lt;i)][v],dp[S][u]+g[u][v]/(double)t[i]);
			ans=min(ans,dp[S][b]);
		}
							
		if(ans == INF)
			puts(&quot;Impossible&quot;);
		else
			printf(&quot;%.3f\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3001">hdu3001</a><br>
题意：<br>
ACMer 想要游玩n个城市，告诉我们每个城市间的旅行费用，并且要求每个城市最多走两遍！问最小花费是多少<br>
本题n=10，数据很小，但是由于每个城市可以走两遍，可能的路线就变成了(2n)!,所以不能暴力<br>
用状压dp，时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mn>3</mn><mi>n</mi></msup><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(3^{n}n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_a79d1b884f-3001.png" alt="3001.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_c0dd19cc4f-30012.png" alt="30012.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/14/9969_caa8c2f84f-30013.png" alt="30013.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cmath&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=15,M=60000,INF=0x3f3f3f3f;
int n,m;
int bit[12]={0,1,3,9,27,81,243,729,2187,6561,19683,59049};//三进制每位为1时对应十进制，如第3位是1，(100)3=9 
int tri[M][N];//dp[S][j]状态S的第j位是多少
int dp[M][N];
int g[N][N];

int main()
{
	//cout&lt;&lt;pow(3,10)&lt;&lt;endl;
	for(int i=0;i&lt;59050;i++)//预处理所有合法状态 
	{
		int t=i;
		for(int j=1;j&lt;=10;j++)
		{
			tri[i][j]=t%3;//预处理当前状态S下每个顶点的访问次数 
			t/=3;
			if(!t)
				break;
		}
	}
	
	while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;m)) 
	{
		int ans=INF;
		memset(g,0x3f,sizeof g);
		memset(dp,0x3f,sizeof dp);
		
		while(m--)
		{
			int a,b,c;
			cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
			g[a][b]=g[b][a]=min(g[a][b],c);
		}
		
		for(int i=1;i&lt;=n;i++)
			dp[bit[i]][i]=0;//每个顶点都可以作为起点，初始化状态为tri[i]时，从i出发最小费用为0
		
		for(int S=0;S&lt;bit[n+1];S++)
		{
			bool visit_all=true;//标记所有的城市都遍历1次以上 
			for(int u=1;u&lt;=n;u++)
			{
				if(tri[S][u] == 0)//u点没被访问 
				{
					visit_all=false;//当前状态不能访问所有顶点至少一次 
					continue; 
				}
				for(int v=1;v&lt;=n;v++)
				{
					if(tri[S][v] == 0)//v点未访问
						continue;
					if(g[u][v] != INF)
						dp[S][u]=min(dp[S][u],dp[S-bit[u]][v]+g[u][v]);//u从S中减去 
				}
			}
			if(visit_all)//所有的城市都遍历1次以上
				for(int u=1;u&lt;=n;u++)
					ans=min(ans,dp[S][u]);
		}
			
		if(ans == INF)
			puts(&quot;-1&quot;);
		else
			cout&lt;&lt;ans&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4628">hdu4628</a><br>
有一个长度不超过 16 的字符串。<br>
每次你可以从中删除一个子序列，但是要求这个子序列是回文的。<br>
问最少删除几次可以把这个字符串删光。<br>
样例：<br>
2<br>
aa （1次）<br>
abb （2次）</p>
<p>每次可以选择一个子序列，而子序列是可以用二进制来表示的。<br>
用一个 n 位的二进制数 s 来表示，如果第 i 位是 1，则表示第 i 个数在这个子序列中。<br>
由此衍生出：用 f[s] 来表示把 s 这个子序列删完的最小步数。<br>
答案自然就是 f[(1 &lt;&lt; n) - 1]</p>
<p>一个显然的想法，可以把 s 分成两个不相交的集合 x 和 y， 即 x ∩ y = ∅，x ∪ y = s<br>
f[s] = min(f[s], f[s-x] + 1) (x 是回文子串）<br>
如何判断x是s的子集？<br>
x|s == s</p>
<p>直接枚举 x 和 y 的时间复杂度是 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>)，对于每个状态都有枚举2^n,总时间复杂度是O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>4</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">4^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>)，无法承受。</p>
<p>注意到 x 和 y 都是 s 的子集。<br>
所有集合的子集个数之和的级别是 O(3^n)<br>
就是说一个集合,有n个元素,2<sup>n个子集,把这2</sup>n个子集的所有子集数相加就是3^n<br>
证明可以对每个集合考虑贡献，二项式定理<br>
空集的子集只有一个——它本身.即C(n,0)×2<sup>0个.有一个元素的子集有C(n,1)=n个,它们分别有2</sup>1=2个子集.共C(n,1)×2<sup>1个.有两个元素的子集有C(n,2)个,它们分别有2</sup>2=4个子集.共C(n,2)×2^2个...<br>
我们只要枚举 s 的子集 x，那么 y 自然就是 s - x</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=20,M=1&lt;&lt;16;
char s[N];
int f[M];
bool st[M];
int n;

bool check(int x)
{
    char str[20];
    int tot=0;
    for(int i=0;i&lt;n;i++)
        if(x&gt;&gt;i &amp; 1) str[tot++]=s[i];
    
    for(int i=0;i&lt;tot/2;i++)
        if(str[i] != str[tot-1-i])
            return 0;
    
    return 1;
}

void init()
{
    memset(st,0,sizeof st);
    for(int i=0;i&lt;1&lt;&lt;n;i++)
        if(check(i))
            st[i]=true;
}

int main()
{
    int T;
    cin&gt;&gt;T;
    while(T--)
    {
        scanf(&quot;%s&quot;,s);
        n=strlen(s);
        init();
        
        memset(f,0x3f,sizeof f);
        f[0]=0;
        for(int i=0;i&lt;1&lt;&lt;n;i++)
            for(int j=i;j;j=(j-1)&amp;i)
                if(st[j]) f[i]=min(f[i],f[i-j]+1);
        
        printf(&quot;%d\n&quot;,f[(1&lt;&lt;n)-1]);
    }
    return 0;
}
</code></pre>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6149">hdu6149</a><br>
给定一张 N 个点 M 条边的无向图，其中有 K 个点被标记为高点，剩下的 (N-K) 个点是低点。<br>
图中的山谷定义为三元组 &lt;X,Y,Z&gt;，满足X和Y之间有边，Y与 Z之间也有边，同时X和Z是高点，Y是低点。<br>
问这个图中最多有几个山谷（一个点只能出现在一个山谷中）N ≤ 30, K ≤ min(N,15)</p>
<p>高点最多只有 15 个。<br>
可以考虑用状态压缩，s 表示高点的使用状态。<br>
低点排成一个长度为 n-k 的序列。<br>
f[i][s] 表示前 i 个低点，使用过的高点的状态为 s 的情况下，组成的山谷的最大可能值。</p>
<p>转移 f[i][s] 的时候，取出第 i+1 个低点。<br>
枚举不在 s 中的两个高点 p 和 q.<br>
检查 p 和 q 和第 i+1 个低点能否配对。<br>
如果可以，那么就可以用 f[i][s] + 1 去更新<br>
f[i + 1][s | (1 &lt;&lt; p) | (1 &lt;&lt; q)]<br>
答案就是 max{ f[n-k][i] | 0 ≤ i &lt; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> }</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
typedef pair&lt;int,int&gt; PII;
const int N=35,M=1&lt;&lt;15;
int f[N][M];
int g[N][N];
int n,m,k;
int high[N],low[N];
bool st[N];
vector&lt;PII&gt; trans[N];
int tot;

void init()
{
	for(int i=1;i&lt;=n;i++)
		if(!st[i])
			low[++tot]=i;
	
	for(int i=1;i&lt;=tot;i++)
	{
		trans[i].clear();
		for(int p=0;p&lt;k;p++)
			if(g[low[i]][high[p]])
				for(int q=p+1;q&lt;k;q++)
					if(g[low[i]][high[q]])
						trans[i].push_back(make_pair(p,q));							
	}
}

int main()
{
	int T;
	cin&gt;&gt;T;
	while(T--)
	{
		memset(g,0,sizeof g);
		memset(st,0,sizeof st);
		memset(f,0,sizeof f);
		tot=0;
		scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);
		for(int i=0;i&lt;m;i++)
		{
			int x,y;
			scanf(&quot;%d%d&quot;,&amp;x,&amp;y);
			g[x][y]=g[y][x]=1;
		}
		
		for(int i=0;i&lt;k;i++)
		{
			scanf(&quot;%d&quot;,&amp;high[i]);
			st[high[i]]=true;
		}
		
		init();
		
		for(int i=1;i&lt;=tot;i++)
		{
			for(int s=0;s&lt;1&lt;&lt;k;s++)
				f[i][s]=f[i-1][s];//不选第i个点
			
			for(int s=0;s&lt;1&lt;&lt;k;s++)
			{
				for(int j=0;j&lt;trans[i].size();j++)
				{
					int x=trans[i][j].first;
					int y=trans[i][j].second;
					if(s&gt;&gt;x &amp; 1) continue;
					if(s&gt;&gt;y &amp; 1) continue;
					f[i][s|(1&lt;&lt;x)|(1&lt;&lt;y)]=max(f[i][s|(1&lt;&lt;x)|(1&lt;&lt;y)],f[i-1][s]+1);//选第i个点
				}
			}
		}
			
		int ans=0;
		for(int i=0;i&lt;1&lt;&lt;k;i++)
			ans=max(ans,f[tot][i]);
		
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/526/">acwing524</a><br>
数据范围非常小，可以考虑状态压缩DP。 设 f[s] 表示清除掉 s 集合中的猪花费的最小步数。<br>
思考转移。<br>
在已有的 s 集合基础上，再选择一条抛物线使得它经过 t集合的点。<br>
那么就可以用 f[s] + 1 去更新 f[s | t]</p>
<p>三点确定一条抛物线。<br>
而三点之中必须有一个原点，因此只要两个点就能确定一条抛物线。<br>
因此我们可以枚举 s 集合以外的任意两个点，算出经过这两个点的抛物线，枚举所有的点看是否落在抛物线上，得到抛<br>
物线经过的点集 t。<br>
f[s | t] = min(f[s | t], f[s] + 1);</p>
<p>经过点 i 和 j 的抛物线经过的点集 t[i][j] 可以预处理。时间复杂度 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>)<br>
之后 DP 枚举每个集合，对每个集合都要枚举两个点。<br>
时间复杂度 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>)</p>
<p>预处理：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>[</mo><mi>i</mi><msup><mo>]</mo><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>y</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">ax[i]^2 + bx[i] = y[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>[</mo><mi>j</mi><msup><mo>]</mo><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>=</mo><mi>y</mi><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">ax[j]^2 + bx[j] = y[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><br>
解二元一次方程组，得到 a 和 b。<br>
如果 a &gt;= 0，不符合题意，t[i][j] = 0<br>
否则对每个点判断一下是否落在这条抛物线上，如果第 k 个点落在抛物线上，<br>
t[i][j] |= (1 &lt;&lt; (k - 1));</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
using namespace std;
const int N=20,M=1&lt;&lt;18;
const double eps=1e-8;
double x[N],y[N];
int path[N][N];
int f[M];
int n,m;

int cmp(double a,double b)
{
	if(fabs(a-b) &lt; eps) return 0;
	else return a&lt;b? -1 : 1;
}

void init()
{
	for(int i=0;i&lt;n;i++)
	{
	    path[i][i] |= 1&lt;&lt;i;
	    
		for(int j=i+1;j&lt;n;j++)
		{
			if(!cmp(x[i],x[j])) continue;
			
			double a=(y[i]/x[i]-y[j]/x[j])/(x[i]-x[j]);
			if(cmp(a,0) &gt;= 0) continue;
			double b=y[i]/x[i]-a*x[i];
			
			for(int k=0;k&lt;n;k++)
				if(!cmp(a*x[k]*x[k]+b*x[k],y[k])) path[i][j]|=1&lt;&lt;k;
		}
	}
}

int main()
{
	int T;
	cin&gt;&gt;T;
	while(T--)
	{
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		for(int i=0;i&lt;n;i++)
			scanf(&quot;%lf%lf&quot;,&amp;x[i],&amp;y[i]);
		memset(path,0,sizeof path);
		
		init();
		
		memset(f,0x3f,sizeof f);
		f[0]=0;
		for(int s=0;s&lt;1&lt;&lt;n;s++)
			for(int i=0;i&lt;n;i++)
				if(!(s&gt;&gt;i &amp; 1))
				{
					for(int j=i;j&lt;n;j++)//记得处理只射一只猪的情况(i == j)
					{
					    if(!(s&gt;&gt;j &amp; 1))
							f[s|path[i][j]] = min(f[s|path[i][j]],f[s]+1);
					}
					break;
					//对于我们枚举的每一个状态i，我们找到它正数第一只没射掉的猪进行转移后break。
                    //因为如果我们转移了第一只后面的没射的猪，到时候还要回头来将第一只猪射掉。
                    //所以后面的没射的猪的转移其实是多余的，射完第一只猪后按顺序接着往后射就可以了。
				}
						
		printf(&quot;%d\n&quot;,f[(1&lt;&lt;n)-1]);
	}
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/531/">acwing529</a><br>
简化版题目：<br>
给定一个 n 个点 m 条边的图，请你求出一个有根树，满足每个点的深度和它到父节点的边权乘积之和最小。<br>
n ≤ 12，m ≤ 1000</p>
<p>考虑到点数只有12个，可以考虑状态压缩 DP。 用 s 表示当前加入的点集。<br>
为了方便转移，我们不记录根是谁，而是直接去考虑深度。<br>
也就是用 f[i][s] 表示当前的点集是 s，最深的点为 i。<br>
然后我们去枚举 s 的补集的子集 t，把 t 都作为第 i+1 层加入 s。</p>
<p>我们不用去考虑 t 里的点在这颗树中是否真的是第 i+1层<br>
因为如果不是的话只可能小于i+1层，答案会更小。<br>
那么一定存在一种转移顺序，考虑到这种更优的情况，也就是先把这个点加入 s 集合。<br>
例如，如果第j层中用到的某条边(a, b)应该在比j小的层，假设a是S中的点，b是第j层的点，则在枚举S + {b}时会得到更小的花费。</p>
<p>具体的操作是：<br>
对于 s，枚举 t（s 的补集的子集），检查 t 里的点是否都和 s 里的点有连边，处理出每个点到 s 里的点的最短边。<br>
设这些最短边边权之和为 v。<br>
那么 f[i][s | t] = min(f[i][s | t], f[i - 1][s] + (i - 1) * v)</p>
<p>时间复杂度分析：<br>
s 一共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个，s 的补集的子集一共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>3</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">3^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个。<br>
处理 t 里的每个点到 s 里的点的最短边，预处理时间复杂度 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)<br>
验证 t 是否可行，时间复杂度 O(n)。<br>
转移时对每个深度都要更新一次，时间复杂度O(n)<br>
总时间复杂度就是 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mi>n</mi><msup><mn>3</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n^22^n + n3^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>)，即 O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><msup><mn>3</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n3^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>)</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;bitset&gt;
using namespace std;
const int N=15,M=1&lt;&lt;12,INF=0x3f3f3f3f;
int f[M][N];
int g[N][N];
int dist[M][N];
int n,m;

void init()
{
    memset(dist,0x3f,sizeof dist);

    for(int s=0;s&lt;1&lt;&lt;n;s++)//集合s 
        for(int i=0;i&lt;n;i++)
            if(!(s&gt;&gt;i &amp; 1))//枚举不在集合s中的点i 
                for(int j=0;j&lt;n;j++)
                    if(s&gt;&gt;j &amp; 1)//预处理出i到集合s的最短距离 
                        dist[s][i]=min(dist[s][i],g[i][j]);
}

int main()
{
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);

    memset(g,0x3f,sizeof g);
    while(m--)
    {
        int a,b,c;
        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);
        a--,b--;
        g[a][b]=g[b][a]=min(g[a][b],c);
    }

    init();

    memset(f,0x3f,sizeof f);
    for(int i=0;i&lt;n;i++) f[1&lt;&lt;i][1]=0;

    for(int s=0;s&lt;1&lt;&lt;n;s++)//集合s 
    {
        int c=(1&lt;&lt;n)-1-s;
        for(int t=c;t;t=(t-1)&amp;c)//集合s的补集t 
        {
            int sum=0;
            for(int i=0;i&lt;n;i++)
                if(t&gt;&gt;i &amp; 1)
                {
                    sum+=dist[s][i];
                    if(sum &gt;= INF) break;
                }   

            if(sum &lt; INF)
                for(int i=1;i&lt;=n;i++)
                    f[s|t][i]=min(f[s|t][i],f[s][i-1]+(i-1)*sum);
        }
    }

    int ans=INF;
    for(int i=1;i&lt;=n;i++)
        ans=min(ans,f[(1&lt;&lt;n)-1][i]);

    printf(&quot;%d\n&quot;,ans);

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[无向图/有向图的连通性复习]]></title>
        <id>https://caifxh.github.io/post/wu-xiang-tu-you-xiang-tu-de-lian-tong-xing-fu-xi/</id>
        <link href="https://caifxh.github.io/post/wu-xiang-tu-you-xiang-tu-de-lian-tong-xing-fu-xi/">
        </link>
        <updated>2020-04-01T06:55:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="相关概念">相关概念</h4>
<h4 id="1无向图">1.无向图</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_e9d8ce8650-%E5%9B%BE%E7%89%871.png" alt="图片1.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_30fd91a250-%E5%9B%BE%E7%89%872.png" alt="图片2.png" loading="lazy"></p>
<h4 id="2有向图">2.有向图</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_68b062be50-%E5%9B%BE%E7%89%874.png" alt="图片4.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_75791d1050-%E5%9B%BE%E7%89%875.png" alt="图片5.png" loading="lazy"></p>
<h4 id="3割点和桥">3.割点和桥</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_97f43b7250-%E5%9B%BE%E7%89%876.png" alt="图片6.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_9a82923050-%E5%9B%BE%E7%89%877.png" alt="图片7.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_b95a655250-%E5%9B%BE%E7%89%878.png" alt="图片8.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_bbf3de2450-%E5%9B%BE%E7%89%879.png" alt="图片9.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_4cf211d450-%E5%9B%BE%E7%89%8710.png" alt="图片10.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_6a3d954c50-%E5%9B%BE%E7%89%8712.png" alt="图片12.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_836f7e0450-%E5%9B%BE%E7%89%8713.png" alt="图片13.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_aff6e25c51-1.PNG" alt="1.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_c688d7f051-2.PNG" alt="2.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_997fdc8e50-%E5%9B%BE%E7%89%8714.png" alt="图片14.png" loading="lazy"></p>
<h4 id="4tarjan算法">4.tarjan算法</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_0ed9e31a50-%E5%9B%BE%E7%89%8717.png" alt="图片17.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_16c7513450-%E5%9B%BE%E7%89%8718.png" alt="图片18.png" loading="lazy"></p>
<h4 id="41无向图的桥">4.1无向图的桥</h4>
<figure data-type="image" tabindex="1"><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_3364dd5250-%E5%9B%BE%E7%89%8719.png" alt="图片19.png" loading="lazy"></figure>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int maxn=1000+5;
int n,m;
int head[maxn],cnt;
struct Edge
{
	int to,next;
}e[maxn&lt;&lt;1];

int low[maxn],dfn[maxn],num;
void add(int u,int v)
{
	e[++cnt].next=head[u];
	e[cnt].to=v;
	head[u]=cnt;	
}
void tarjan(int u,int fa)
{
	dfn[u]=low[u]=++num;
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(v==fa)
			continue;
		if(!dfn[v])
		{
			tarjan(v,u);
			low[u]=min(low[u],low[v]);
			if(low[v]&gt;dfn[u])
				cout&lt;&lt;u&lt;&lt;&quot;—&quot;&lt;&lt;v&lt;&lt;&quot;是桥&quot;&lt;&lt;endl; 
		}
		else
			low[u]=min(low[u],dfn[v]);
	}
}

void init()
{
	memset(head,0,sizeof(head));
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	cnt=num=0;
}

int main()
{
	while(cin&gt;&gt;n&gt;&gt;m)
	{
		init();
		int u,v;
		while(m--)
		{
			cin&gt;&gt;u&gt;&gt;v;
			add(u,v);
			add(v,u);
		}
		for(int i=1;i&lt;=n;i++)
			if(!dfn[i])
				tarjan(1,0);
	}
	return 0;
}
</code></pre>
<h4 id="42无向图的割点">4.2无向图的割点</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_9b23cd3650-%E5%9B%BE%E7%89%8720.png" alt="图片20.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_36cbb05e50-%E5%9B%BE%E7%89%8721.png" alt="图片21.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_3fabda8c50-%E5%9B%BE%E7%89%8722.png" alt="图片22.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int maxn=1000+5;
int n,m;
int head[maxn],cnt,root;
struct Edge
{
	int to,next;
}e[maxn&lt;&lt;1];

int low[maxn],dfn[maxn],num;
void add(int u,int v)
{
	e[++cnt].next=head[u];
	e[cnt].to=v;
	head[u]=cnt;	
}
void tarjan(int u,int fa)
{
	dfn[u]=low[u]=++num;
	int count=0;
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(v==fa)
			continue;
		if(!dfn[v])
		{
			tarjan(v,u);
			low[u]=min(low[u],low[v]);
			if(low[v]&gt;=dfn[u])
			{
				count++;
				if(u!=root||count&gt;1)
					cout&lt;&lt;u&lt;&lt;&quot;是割点&quot;&lt;&lt;endl; 
			}	
		}
		else
			low[u]=min(low[u],dfn[v]);
	}
}

void init()
{
	memset(head,0,sizeof(head));
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	cnt=num=0;
}

int main()
{
	while(cin&gt;&gt;n&gt;&gt;m)
	{
		init();
		int u,v;
		while(m--)
		{
			cin&gt;&gt;u&gt;&gt;v;
			add(u,v);
			add(v,u);
		}
		for(int i=1;i&lt;=n;i++)
			if(!dfn[i])
			{
				root=i;
				tarjan(i,0);
			 } 
	}
	return 0;
}
</code></pre>
<h4 id="有向图的强连通分量scc">有向图的强连通分量（SCC）</h4>
<figure data-type="image" tabindex="2"><img src="https://cdn.acwing.com/media/article/image/2020/02/16/9969_91ef325650-%E5%9B%BE%E7%89%8723.png" alt="图片23.png" loading="lazy"></figure>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;stack&gt;
using namespace std;
const int maxn=1000+5;
int n,m;
int head[maxn],cnt;
stack&lt;int&gt;s;
bool ins[maxn];
struct Edge
{
	int to,next;
}e[maxn&lt;&lt;1];

int low[maxn],dfn[maxn],num;
void add(int u,int v)
{
	e[++cnt].next=head[u];
	e[cnt].to=v;
	head[u]=cnt;	
}
void tarjan(int u)
{
	low[u]=dfn[u]=++num;
	ins[u]=true;
	s.push(u);
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(!dfn[v])
		{
			tarjan(v);
			low[u]=min(low[u],low[v]);
		}
		else if(ins[v])
			low[u]=min(low[u],dfn[v]);
	}
	if(low[u]==dfn[u])
	{
		int v;
		cout&lt;&lt;&quot;连通分量：&quot;;
		do
		{
			v=s.top();
			s.pop();
			cout&lt;&lt;v&lt;&lt;&quot; &quot;;
			ins[v]=false;
		}while(v!=u);
		cout&lt;&lt;endl;
	}
}

void init()
{
	memset(head,0,sizeof(head));
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	memset(ins,0,sizeof(ins));
	cnt=num=0;
}

int main()
{
	while(cin&gt;&gt;n&gt;&gt;m)
	{
		init();
		int u,v;
		while(m--)
		{
			cin&gt;&gt;u&gt;&gt;v;
			add(u,v);
		}
		for(int i=1;i&lt;=n;i++)
			if(!dfn[i])
				tarjan(i);
	}
	return 0;
}
</code></pre>
<h4 id="例题">例题</h4>
<p><a href="http://poj.org/problem?id=1144">poj1144</a><br>
求割点数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
const int maxn=105;
int n,root;
int head[maxn],cnt;
struct Edge
{
	int to,next;
}e[maxn*maxn];

int low[maxn],dfn[maxn],num;
bool cut[maxn];
void add(int u,int v)
{
	e[++cnt].next=head[u];
	e[cnt].to=v;
	head[u]=cnt;	
}
void tarjan(int u)
{
	dfn[u]=low[u]=++num;
	int flag=0;
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(!dfn[v])
		{
			tarjan(v);
			low[u]=min(low[u],low[v]);
			if(low[v]&gt;=dfn[u])
			{
				flag++;
				if(u!=root||flag&gt;1)//u不是根或者u是根但至少有两个子结点
					cut[u]=true; 			
			}
		}
		else
			low[u]=min(low[u],dfn[v]);
	}
}

void init()
{
	memset(head,0,sizeof(head));
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	memset(cut,false,sizeof(cut));
	cnt=num=0;
}

int main()
{ 
	while(cin&gt;&gt;n&amp;&amp;n)
	{
		init(); 
		int u,v;
		while(cin&gt;&gt;u&amp;&amp;u)
		{
			while(1)
			{
				char c=getchar();
				if(c=='\n')
					break;
				cin&gt;&gt;v;
				add(u,v);
				add(v,u);
			}
		}
		for(int i=1;i&lt;=n;i++)
			if(!dfn[i])
			{
				root=i;
				tarjan(i);
			}
		int ans=0;
		for(int i=1;i&lt;=n;i++)
			if(cut[i])
				ans++;
		cout&lt;&lt;ans&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=3532">poj3352</a><br>
最少加几条边，才能使无向图变成边双连通图。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_65ccf7c051-%E5%9B%BE%E7%89%8724.png" alt="图片24.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_8fec68a651-%E5%9B%BE%E7%89%8725.png" alt="图片25.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_92f0d99251-%E5%9B%BE%E7%89%8726.png" alt="图片26.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int maxn=1000+5;
int n,m;
int head[maxn],cnt;
struct Edge
{
	int to,next;
}e[maxn&lt;&lt;1];

int low[maxn],dfn[maxn],degree[maxn],num;
void add(int u,int v)
{
	e[++cnt].next=head[u];
	e[cnt].to=v;
	head[u]=cnt;	
}
void tarjan(int u,int fa)
{
	dfn[u]=low[u]=++num;
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(v==fa)
			continue;
		if(!dfn[v])
		{
			tarjan(v,u);
			low[u]=min(low[u],low[v]);
		}
		else
			low[u]=min(low[u],dfn[v]);
	}
}

void init()
{
	memset(head,0,sizeof(head));
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	memset(degree,0,sizeof(degree));
	cnt=num=0;
}

int main()
{
	while(cin&gt;&gt;n&gt;&gt;m)
	{
		init();
		int u,v;
		while(m--)
		{
			cin&gt;&gt;u&gt;&gt;v;
			add(u,v);
			add(v,u);
		}
		tarjan(1,-1);
		for(int u=1;u&lt;=n;u++)
			for(int i=head[u];i;i=e[i].next)
			{
				int v=e[i].to;
				if(low[u]!=low[v])
					degree[low[u]]++;
			}
		int leaf=0;
		for(int i=1;i&lt;=n;i++)
			if(degree[i]==1)
				leaf++;
		cout&lt;&lt;(leaf+1)/2&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<p>换种写法：(可求得所有点双连通分量)</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int N=5010,M=200010;
int h[N],e[M],ne[M],idx;
int n,m;
int dfn[N],low[N],timestamp;
int stk[N],top;
int dcc_cnt;
int d[N];
bool is_bridge[M];
int id[N];

void add(int a,int b)
{
    e[idx]=b;
    ne[idx]=h[a];
    h[a]=idx++;
}

void tarjan(int u,int fa)
{
    dfn[u]=low[u]=++timestamp;
    stk[++top]=u;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(j == fa)
            continue;
        if(!dfn[j])
        {
            tarjan(j,u);
            low[u]=min(low[u],low[j]);
            if(dfn[u] &lt; low[j])
                is_bridge[i]=is_bridge[i^1]=true;
        }
        else
            low[u]=min(low[u],dfn[j]);
    }
    
    if(dfn[u] == low[u])
    {
        ++dcc_cnt;
        int y;
        do{
            y=stk[top--];
            id[y]=dcc_cnt;
        }while(y != u);
    }
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    memset(h,-1,sizeof h);
    while(m--)
    {
        int a,b;
        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
        add(a,b);
        add(b,a);
    }
    
    tarjan(1,-1);
    
    for(int i=0;i&lt;idx;i++)
        if(is_bridge[i])
            d[id[e[i]]]++;
            
    int cnt=0;
    for(int i=1;i&lt;=dcc_cnt;i++)
        if(d[i] == 1)
            cnt++;
    cout&lt;&lt;(cnt+1)/2&lt;&lt;endl;
    return 0;
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_056f276c51-%E5%9B%BE%E7%89%8728.png" alt="图片28.png" loading="lazy"></figure>
<blockquote></blockquote>
<p><a href="http://poj.org/problem?id=2553">poj2553</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_d26602d651-%E6%8D%95%E8%8E%B7.PNG" alt="捕获.PNG" loading="lazy"><br>
求解强连通分量，缩点，计算缩点的出度，统计出度为0的顶点。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_5af107cc51-%E5%9B%BE%E7%89%8729.png" alt="图片29.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;stack&gt;
using namespace std;
const int maxn=5050;
int n,m;
bool ins[maxn];//标记是否在栈内 
int head[maxn],id[maxn],dout[maxn];
int low[maxn],dfn[maxn];
stack&lt;int&gt; s;
int cnt,num,scc_cnt;
struct Egde
{
	int to,next;
}e[maxn*maxn];
void add(int u,int v)
{
	e[++cnt].to=v;
	e[cnt].next=head[u];
	head[u]=cnt;
}
void init()
{
	memset(head,0,sizeof(head));
	memset(dfn,0,sizeof(dfn));
	memset(low,0,sizeof(low));
	memset(ins,false,sizeof(ins));
	memset(dout,0,sizeof(dout));
	memset(id,0,sizeof(id));
	cnt=num=0;
	scc_cnt=0;
}
void tarjan(int u)
{
	low[u]=dfn[u]=++num;
	ins[u]=true;
	s.push(u);
	for(int i=head[u];i;i=e[i].next)
	{
		int v=e[i].to;
		if(!dfn[v])
		{
			tarjan(v);
			low[u]=min(low[u],low[v]);
		}
		else if(ins[v])
			low[u]=min(low[u],dfn[v]);
	}
	if(low[u]==dfn[u])
	{
		int v;
		++scc_cnt;
		do
		{
			v=s.top();
			s.pop();
			id[v]=scc_cnt;
			ins[v]=false;
		}while(v!=u);
	}
}

int main()
{
	while((cin&gt;&gt;n)&amp;&amp;n)
	{
		cin&gt;&gt;m;
		init();
		while(m--)
		{
			int u,v;
			cin&gt;&gt;u&gt;&gt;v;
			add(u,v);
		}
		for(int i=1;i&lt;=n;i++)
			if(!dfn[i])
				tarjan(i);
		for(int u=1;u&lt;=n;u++)
			for(int i=head[u];i;i=e[i].next)
			{
				int v=e[i].to;
				if(id[u]!=id[v])
					dout[id[u]]++; 
			}
		int flag=1;
		for(int i=1;i&lt;=n;i++)
		{
			if(!dout[id[i]])
			{
				if(flag)
					flag=0;
				else
					cout&lt;&lt;&quot; &quot;;
				cout&lt;&lt;i;
			}		
		}
		cout&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=1236">poj1236</a>/<a href="https://www.acwing.com/problem/content/369/">acwing367</a><br>
至少添加几条边，使得有向图为强连通图<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_5b172a9851-%E5%9B%BE%E7%89%8730.png" alt="图片30.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_5e7c024451-%E5%9B%BE%E7%89%8731.png" alt="图片31.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_1f7d3e4051-%E5%9B%BE%E7%89%8732.png" alt="图片32.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
const int N=110,M=N*N;
int n;
int h[N],e[M],ne[M],idx;
int dfn[N],low[N];
int stk[N],top;
bool in_stk[N];
int scc_cnt,timestamp;
int id[N];
int dout[N],din[N];

void add(int a,int b)
{
    e[idx]=b;
    ne[idx]=h[a];
    h[a]=idx++;
}

void tarjan(int u)
{
    dfn[u]=low[u]=++timestamp;
    stk[++top]=u;
    in_stk[u]=true;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
        }
        else if(in_stk[j])
            low[u]=min(low[u],dfn[j]);
    }   
    
    if(dfn[u] == low[u])
    {
        ++scc_cnt;
        int y;
        do{
            y=stk[top--];
            //cout&lt;&lt;y&lt;&lt;' ';
            in_stk[y]=false;
            id[y]=scc_cnt;
        }while(y != u);
        //cout&lt;&lt;endl;
    }
}

int main()
{
    cin&gt;&gt;n;
    memset(h,-1,sizeof h);
    for(int i=1;i&lt;=n;i++)
    {
        int x;
        while(cin&gt;&gt; x &amp;&amp; x)
            add(i,x);
    }
        
    
    for(int i=1;i&lt;=n;i++)
        if(!dfn[i])
            tarjan(i);
    
    // for(int i=1;i&lt;=n;i++)
    // {
    //     cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;id[i]&lt;&lt;endl;
    // }
    for(int i=1;i&lt;=n;i++)
        for(int j=h[i];~j;j=ne[j])
        {
            int k=e[j];
            int a=id[i],b=id[k];
            if(a != b)
            {
                dout[a]++;
                din[b]++;
            }
        }
     
    int a=0,b=0;  
    for(int i=1;i&lt;=scc_cnt;i++)
    {
        if(!din[i])
            a++;
        if(!dout[i])
            b++;
    }
    
    cout&lt;&lt;a&lt;&lt;endl;
    if(scc_cnt == 1)
        cout&lt;&lt;0&lt;&lt;endl;
    else
        cout&lt;&lt;max(a,b)&lt;&lt;endl;
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/description/1176/">acwing1174</a><br>
（1）若采用暴力求解，先建反图，判断从每个点出发能否到达所有点。时间复杂度：$O(n(n+m))<br>
（2）若为拓扑图，则只需判断出度为0的点，若出度为0的点大于1个，则答案为0，若出度为0的点为1，则答案为1.<br>
先求出所有强连通分量，然后缩点，判断出度为0的分量，答案为该分量里的点的数目。</p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int N = 10010, M = 50010;

int n, m;
int h[N], e[M], ne[M], idx;
int dfn[N], low[N], timestamp;
int stk[N], top;
bool in_stk[N];
int id[N], scc_cnt, cnt[N];//强连通分量编号，每个分量里点的数目
int dout[N];

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u] = low[u] = ++ timestamp;
    stk[ ++ top] = u, in_stk[u] = true;
    for (int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if (!dfn[j])
        {
            tarjan(j);
            low[u] = min(low[u], low[j]);
        }
        else if (in_stk[j]) low[u] = min(low[u], dfn[j]);
    }

    if (dfn[u] == low[u])
    {
        ++ scc_cnt;
        int y;
        do {
            y = stk[top -- ];
            in_stk[y] = false;
            id[y] = scc_cnt;
            cnt[scc_cnt] ++ ;
        } while (y != u);
    }
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    memset(h, -1, sizeof h);
    while (m -- )
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        add(a, b);
    }

    for (int i = 1; i &lt;= n; i ++ )
        if (!dfn[i])
            tarjan(i);

    for (int i = 1; i &lt;= n; i ++ )
        for (int j = h[i]; ~j; j = ne[j])
        {
            int k = e[j];
            int a = id[i], b = id[k];
            if (a != b) dout[a] ++ ;
        }

    int zeros = 0, sum = 0;
    for (int i = 1; i &lt;= scc_cnt; i ++ )
        if (!dout[i])
        {
            zeros ++ ;
            sum += cnt[i];
            if (zeros &gt; 1)
            {
                sum = 0;
                break;
            }
        }

    printf(&quot;%d\n&quot;, sum);

    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1177/">acwing1175</a><br>
求最大半连通子图的结点数和最大半连通子图数。<br>
(1)对于任何一个强连通分量（tarjan），一定是半连通分量。<br>
(2)缩点，建图得到一个有向无环图（拓扑图），求拓扑图上的最长链（最长链包含的结点数即为最大半连通子图的结点数）。缩完点之后的图中出现了重边怎么办,那就会使方案数莫名增多.所以对于缩完点后的图还要判重边<br>
(3)最长链的条数即为最大半连通子图数。<br>
求最长链采用dp，跑最长路,我们只需要找出一条点权最大的路径就行了，不限制点的个数。<br>
所以首先对这个图进行tarjan缩点，并记录下每个连通块的大小，和每个点所在的连通块。<br>
缩点之后，会发现这个图变成了一个dag（有向无环图），我们要对这个dag求出最长链的大小和个数。<br>
因为这个图是无环的，所以我们可以按照拓扑序进行DP</p>
<h4 id="tarjan缩点后的点的标号顺序是逆拓扑序所以不需要对新图进行拓扑排序">Tarjan缩点后的点的标号顺序是逆拓扑序，所以不需要对新图进行拓扑排序</h4>
<p>状态表示: f[i]表示到第i个连通块的最长链大小，g[i]表示个数。<br>
很容易就想到了转移的方法：<br>
1.{g[i]=g[i]+g[j]}(条件：f[j]+number[i]==f[i])<br>
2.{g[i]=g[j],f[i]=f[j]+number[i]}(条件：f[j]+number[i]&gt;f[i])。<br>
按照这个转移状态就可以啦。<br>
总结：强连通分量+缩点+去重+DAGdp</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;unordered_set&gt;
#include&lt;cstring&gt;
using namespace std;
const int N=100010,M=2000010;
int h[N],hs[N],e[M],ne[M],idx;
int n,m,mod;
int dfn[N],low[N],timestamp;
int id[N],scc_cnt,Size[N];
int f[N],g[N];
typedef pair&lt;int,int&gt; PII;
int stk[N],top;
bool ins[N];
typedef long long LL;

void add(int h[], int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u]=low[u]=++timestamp;
    stk[++top]=u,ins[u]=true;
    
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
        }
        else if(ins[j])
            low[u]=min(low[u],dfn[j]);
    }
    
    if(dfn[u] == low[u])
    {
        ++scc_cnt;
        int y;
        do{
            y=stk[top--];
            ins[y]=false;
            id[y]=scc_cnt;
            Size[scc_cnt]++;
        }while(y != u);
    }
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m&gt;&gt;mod;
    memset(h,-1,sizeof h);
    memset(hs,-1,sizeof hs);
    while(m--)
    {
        int a,b;
        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
        add(h,a,b);
    }
    
    for(int i=1;i&lt;=n;i++)
        if(!dfn[i])
            tarjan(i);
        
    unordered_set&lt;LL&gt; S;//(u,v)-&gt;u*1000000+v
    for(int i=1;i&lt;=n;i++)
        for(int j=h[i];~j;j=ne[j])
        {
            int k=e[j];
            int a=id[i],b=id[k];
            LL hash=a*1000000ll+b;
            if(a != b &amp;&amp; !S.count(hash))
            {
                add(hs,a,b);
                S.insert(hash);
            }
        }
    
    for(int i=scc_cnt;i;i--)//缩点后的顺序为逆拓扑序 
    {
        if (!f[i])//代表它是入度为0的点 
        {
            f[i] = Size[i];
            g[i] = 1;
        }
        for(int j=hs[i];~j;j=ne[j])
        {
            int k=e[j];
            if(f[k]&lt;f[i]+Size[k])
            {
                f[k]=f[i]+Size[k];
                g[k]=g[i];
            }
            else if(f[k] == f[i] + Size[k])
                g[k]=(g[k]+g[i])%mod;
        }
    }
    
    int maxf=0,sum=0;
    for(int i=1;i&lt;=scc_cnt;i++)
        if(f[i]&gt;maxf)
        {
            maxf=f[i];
            sum=g[i];
        }
        else if(f[i] == maxf)
            sum=(sum+g[i])%mod;
    
    cout&lt;&lt;maxf&lt;&lt;endl;
    cout&lt;&lt;sum&lt;&lt;endl;
    return 0;
    
}
</code></pre>
<p>补一个缩点的模板<a href="https://www.luogu.com.cn/problem/P3387">缩点</a>`</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
using namespace std;
const int N=10010,M=200010;
int h[N],hs[N],e[M],ne[M],idx;
int n,m;
int dfn[N],low[N],timestamp;
int id[N],scc_cnt,Size[N];
int f[N];
int stk[N],top;
bool ins[N];
int p[N];//点权 

void add(int h[], int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u]=low[u]=++timestamp;
    stk[++top]=u,ins[u]=true;
    
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
        }
        else if(ins[j])
            low[u]=min(low[u],dfn[j]);
    }
    
    if(dfn[u] == low[u])
    {
        ++scc_cnt;
        int y;
        do{
            y=stk[top--];
            ins[y]=false;
            id[y]=scc_cnt;
            Size[scc_cnt]+=p[y];
        }while(y != u);
    }
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=n;i++)
    	cin&gt;&gt;p[i];
    memset(h,-1,sizeof h);
    memset(hs,-1,sizeof hs);
    while(m--)
    {
        int a,b;
        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
        add(h,a,b);
    }
    
    for(int i=1;i&lt;=n;i++)
        if(!dfn[i])
            tarjan(i);
        
    for(int i=1;i&lt;=n;i++)
        for(int j=h[i];~j;j=ne[j])
        {
            int k=e[j];
            int a=id[i],b=id[k];
            if(a != b)
            {
                add(hs,a,b);
            }
        }
    
    for(int i=scc_cnt;i;i--)//缩点后的顺序为逆拓扑序 
    {
    	if(!f[i])
    	{
    		f[i]=Size[i];
		}
        for(int j=hs[i];~j;j=ne[j])
        {
            int k=e[j];
            if(f[k]&lt;f[i]+Size[k])
            {
                f[k]=f[i]+Size[k];
            }
        }
    }
    
    int maxf=0;
    for(int i=1;i&lt;=scc_cnt;i++)
  		maxf=max(maxf,f[i]);
    cout&lt;&lt;maxf&lt;&lt;endl;
    return 0;
    
}
</code></pre>
<p>再补一个DAGdp的简单题<a href="https://www.luogu.com.cn/problem/P1137">P1137</a></p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

const int maxn=100000+15;
int n,m,idx;
int head[maxn],din[maxn],dp[maxn];
struct EDGE
{
    int to;
	int next;
}edge[maxn&lt;&lt;2];
int q[maxn],hh,tt=-1;

void add(int x,int y)
{
    edge[++idx].next=head[x];
    edge[idx].to=y;
    head[x]=idx;
}

void topsort()
{
    
    for (int i=1;i&lt;=n;i++)
	    if (din[i]==0) 
			q[++tt]=i;
			
    while (hh&lt;=tt)
    {
        int t=q[hh++];
        for (int i=head[t];i;i=edge[i].next)
        {
            int v=edge[i].to;
            din[v]--;
            if (din[v]==0)
            	q[++tt]=v;
        }
    }
}

int main()
{
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    for (int i=1;i&lt;=m;i++)
    {
        int u,v;
        scanf(&quot;%d%d&quot;,&amp;u,&amp;v);
        add(u,v);
        din[v]++;
    }
    
    topsort();
    
    for (int i=1;i&lt;=n;i++)
    {
        int u=q[i-1];
        if(!dp[u])
        	dp[u]=1;
        for (int j=head[u];j;j=edge[j].next)
        {
            int v=edge[j].to;
            dp[v]=max(dp[v],dp[u]+1);
        }
    }
    for (int i=1;i&lt;=n;i++)
    	printf(&quot;%d\n&quot;,dp[i]);
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1185/">acwing1183</a><br>
题意：求删除一个点后，图中最多有多少个连通块。</p>
<pre><code>/*
1.统计连通块数量
2.枚举每一个连通块删除割点后所得的最大连通块数ans
3.ans+cnt-1即为答案
*/
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=10010,M=30010;
int n,m;
int h[N],e[M],ne[M],idx;
int dfn[N],low[N],timestamp;
int ans;
int root;

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u]=low[u]=++timestamp;
    int cnt=0;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
            if(low[j] &gt;= dfn[u])
            {
                cnt++;
            }
        }
        else 
            low[u]=min(low[u],dfn[j]);
    }

    if(u != root &amp;&amp; cnt)//不是根节点，还要加上父节点的那一块连通分量
        cnt++;
    ans=max(ans,cnt);//每一个连通块删除割点后所得的最大连通块数ans
}

int main()
{
    while(cin&gt;&gt;n&gt;&gt;m &amp;&amp; n)
    {
        memset(h,-1,sizeof h);
        memset(dfn,0,sizeof dfn);
        memset(low,0,sizeof low);
        idx=timestamp=0;
        ans=0;

        while(m--)
        {
            int a,b;
            cin&gt;&gt;a&gt;&gt;b;
            add(a,b);
            add(b,a);
        }

        int cnt=0;
        for(root=0;root&lt;n;root++)
            if(!dfn[root])
            {
                cnt++;//连通块数
                tarjan(root);
            }
        
        cout&lt;&lt;ans+cnt-1&lt;&lt;endl;
    }
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/398/">acwing396</a><br>
题意：<br>
就是有很多个点，在某个时候一个点将会塌陷，你要建造一些点，使任意一点塌陷时其他点都能成功逃脱<br>
情况一：当前连通块内没有一个割点<br>
那么此时至少要建立两个点，使得在任意一点坍塌时能顺利逃脱，那么此时要建立的点的个数就是2，<br>
而方案数则是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo>)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">C_n^2 = \frac{n(n−1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>,n为点数<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_5e45159651-111.PNG" alt="111.PNG" loading="lazy"><br>
情况二：当前连通块中有一个割点<br>
此时在当前点双连通分量中非割点位置任意选取一个顶点建立1个出口即可，方案数为；cnt-1（cnt为当前连通分量中点数）<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/17/9969_f1256c0851-222.PNG" alt="222.PNG" loading="lazy"><br>
情况三：当前连通块中中有一个割点以上，无需设置出口（一个割点时已设置出口，且各个v-dcc连通，无论删去任意一个出口or割点or普通点，都可保证剩下点可成功逃离）</p>
<pre><code>#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
using namespace std;
typedef unsigned long long ULL;
const int N = 1010, M = 1010;
int n,m;
int h[N],e[M],ne[M],idx;
int dfn[N],low[N],timestamp;
int stk[N],top;
int dcc_cnt;
vector&lt;int&gt; dcc[N];
bool cut[N];
int root;

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u]=low[u]=++timestamp;
    stk[++top]=u;
    if(u == root &amp;&amp; h[u] == -1)
    {
        dcc_cnt++;
        dcc[dcc_cnt].push_back(u);
        return;
    }
    
    int cnt=0;
    for(int i=h[u];~i;i=ne[i])
    {
        int j=e[i];
        if(!dfn[j])
        {
            tarjan(j);
            low[u]=min(low[u],low[j]);
            if(low[j] &gt;= dfn[u])
            {
                cnt++;
                if(u != root || cnt &gt;1)
                    cut[u]=true;
                ++dcc_cnt;
                int y;
                do{
                    y=stk[top--];
                    dcc[dcc_cnt].push_back(y);
                }while(y != j);
                dcc[dcc_cnt].push_back(u);
            }
        }
        else 
            low[u]=min(low[u],dfn[j]);
    }
}

int main()
{
    int kase=1;
    while(cin&gt;&gt;m &amp;&amp; m)
    {
        for(int i=1;i&lt;=dcc_cnt;i++)
            dcc[i].clear();
        idx=n=timestamp=top=dcc_cnt=0;
        memset(h,-1,sizeof h);
        memset(dfn,0,sizeof dfn);
        memset(cut,0,sizeof cut);
        
        while(m--)
        {
            int a,b;
            cin&gt;&gt;a&gt;&gt;b;
            n=max(n,a),n=max(n,b);
            add(a,b);
            add(b,a);
        }
        
        for(root = 1; root &lt;= n; root ++)
        {
            if(!dfn[root])
                tarjan(root);
        }
        
        int res=0;
        ULL num=1;
        for(int i=1;i&lt;=dcc_cnt;i++)
        {
            int cnt=0;//统计当前v-dcc中割点的数量
            for(int j=0;j&lt;dcc[i].size();j++)
                if(cut[dcc[i][j]])
                    cnt++;
            
            if(cnt == 0)
            {
                if(dcc[i].size()&gt;1)
                    res+=2,num*=dcc[i].size()*(dcc[i].size()-1)/2;
                else 
                    res++;//孤立点
            }
            else if (cnt == 1)
            {
                res++,num*=dcc[i].size()-1;
            }
        }
         printf(&quot;Case %d: %d %llu\n&quot;, kase++, res, num);
    }
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/370/">acwing368</a><br>
图片转自<a href="https://www.acwing.com/user/myspace/index/11971/">@xxh</a>的题解<br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/18/9969_55ff82da52-cf30.PNG" alt="cf30.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/18/9969_6544d1be52-cf31.PNG" alt="cf31.PNG" loading="lazy"></p>
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

typedef long long LL;

const int N = 100010, M = 600010;

int n, m;
int h[N], hs[N], e[M], ne[M], w[M], idx;
int dfn[N], low[N], timestamp;
int stk[N], top;
bool in_stk[N];
int id[N], scc_cnt, size[N];
int dist[N];

void add(int h[], int a, int b, int c)
{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;
}

void tarjan(int u)
{
    dfn[u] = low[u] = ++ timestamp;
    stk[ ++ top] = u, in_stk[u] = true;

    for (int i = h[u]; ~i; i = ne[i])
    {
        int j = e[i];
        if (!dfn[j])
        {
            tarjan(j);
            low[u] = min(low[u], low[j]);
        }
        else if (in_stk[j]) low[u] = min(low[u], dfn[j]);
    }

    if (dfn[u] == low[u])
    {
        ++ scc_cnt;
        int y;
        do {
            y = stk[top -- ];
            in_stk[y] = false;
            id[y] = scc_cnt;
            size[scc_cnt] ++ ;
        } while (y != u);
    }
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    memset(h, -1, sizeof h);
    memset(hs, -1, sizeof hs);

    for (int i = 1; i &lt;= n; i ++ ) add(h, 0, i, 1);

    while (m -- )
    {
        int t, a, b;
        scanf(&quot;%d%d%d&quot;, &amp;t, &amp;a, &amp;b);
        if (t == 1) add(h, b, a, 0), add(h, a, b, 0);
        else if (t == 2) add(h, a, b, 1);
        else if (t == 3) add(h, b, a, 0);
        else if (t == 4) add(h, b, a, 1);
        else add(h, a, b, 0);
    }

    tarjan(0);//从超级源点可到所有点

    bool success = true;
    for (int i = 0; i &lt;= n; i ++ )
    {
        for (int j = h[i]; ~j; j = ne[j])
        {
            int k = e[j];
            int a = id[i], b = id[k];
            if (a == b)
            {
                if (w[j] &gt; 0)//只要任意一个SCc里有边权大于0的边，则存在正环
                {
                    success = false;
                    break;
                }
            }
            else 
                add(hs, a, b, w[j]);
        }
        if (!success) 
            break;
    }

    if (!success) puts(&quot;-1&quot;);
    else
    {
        for (int i = scc_cnt; i; i -- )
        {
            //入度为0的点dist为0
            for (int j = hs[i]; ~j; j = ne[j])
            {
                int k = e[j];
                dist[k] = max(dist[k], dist[i] + w[j]);
            }
        }

        LL res = 0;
        for (int i = 1; i &lt;= scc_cnt; i ++ ) 
            res += (LL)dist[i] * size[i];

        printf(&quot;%lld\n&quot;, res);
    }

    return 0;
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P3627">P3627</a><br>
题意：<br>
在有向图中找一条路径，使得经过的点的点权和最大（每个点可以经过多次，但只有一次对答案的贡献<br>
思路：<br>
首先看见可以重复走路径，那么就想到其实这些路口可以构成一个个强连通分量（因为只要我们能到达一个强连通分量其中某一个点，那么我们就能到达这个强连通分量的其余所有点，根据贪心策略，这样得到的答案保证更优）。那就很容易想到缩点加最长路。<br>
缩点+spfa最长路<a href="https://paste.ubuntu.com/p/ftjQ8xspVv/">code</a></p>
<p>推荐博客：<br>
https://blog.csdn.net/acmmmm/article/details/16361033<br>
https://blog.csdn.net/sentimental_dog/article/details/53790582</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[求组合数]]></title>
        <id>https://caifxh.github.io/post/qiu-zu-he-shu/</id>
        <link href="https://caifxh.github.io/post/qiu-zu-he-shu/">
        </link>
        <updated>2020-03-28T02:16:07.000Z</updated>
        <content type="html"><![CDATA[<h4 id="组合数的计算">组合数的计算</h4>
<h4 id="求组合数-i杨辉三角递推法">求组合数 I（杨辉三角递推法）</h4>
<p>给定 n, m，计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>对 109+7 取模的结果。<br>
当 n，m 都比较小的时候且需要频繁地调用组合数的时候,采用 Pascal 公式预处理出所有对a，b对应的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>a</mi><mi>b</mi></msubsup></mrow><annotation encoding="application/x-tex">C_a^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.096108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><br>
若只要求一个组合数的话，也可以滚动一下这个数组，节约空间，但同时m这一维要倒着枚举，就像01背包一样。程序如下：</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
const int N=2010,mod=1e9+7;
int c[N][N];

int main()
{
    for(int i=0;i&lt;N;i++)
        for(int j=0;j&lt;=i;j++)
            if(!j)
                c[i][j]=1;
            else
                c[i][j]=(c[i-1][j]+c[i-1][j-1])%mod;
    
    int n;
    cin&gt;&gt;n;
    while(n--)
    {
        int a,b;
        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
        printf(&quot;%d\n&quot;,c[a][b]);
    }
    return 0;
}
</code></pre>
<p>滚动数组优化:</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
int n,m;
long long c[10005];
int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    m=min(m,n-m);
    c[0]=1;
    for (int i=1;i&lt;=n;i++)
    {
        for (int j=m;j&gt;=1;j--)
        {
            c[j]=c[j]+c[j-1];
        }
    }
    cout&lt;&lt;c[m];
}
</code></pre>
<p>因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mrow><mi>n</mi><mi mathvariant="normal">−</mi><mi>m</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_n^m=C_n^{n−m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0183309999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">−</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>，所以m可以取m和n-m中小的那一个，以节省时间。但复杂度还是过高，约为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<h4 id="求组合数-ii乘法逆元">求组合数 II（乘法逆元）</h4>
<p><code>这种方法只适用于对答案模一个大质数的情况</code>。<br>
当 n, m &gt; 10000的时候，就不能再使用 O(n^2) 的做法了。需要使用公式：<img src="https://cdn.acwing.com/media/article/image/2020/03/16/9969_e3438e0c67-40.PNG" alt="40.PNG" loading="lazy"><br>
第一种做法：（费马小定理）<br>
令 fact[n]=n!</p>
<pre><code>fact[0] = 1;
for (int i = 1;i &lt;= n;i ++)
    fact[i] =(LL) fact[i - 1] * i % p;
</code></pre>
<p>令分母 k =(LL)fact[m] * fact[n - m] % p<br>
计算 k 模 p 的逆元，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>k</mi><mrow><mi>p</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{p-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> MOD p<br>
答案就是(LL)fact[n] *  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>k</mi><mrow><mi>p</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{p-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> MOD p<br>
这样需要一次快速幂，时间复杂度 O(nlog n)</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
const int N=100010,mod=1e9+7;
int fact[N],infact[N];
typedef long long LL;

int qmi(int a,int k,int p)
{
    int res=1;
    while(k)
    {
        if(k&amp;1)
            res=(LL)res*a%p;
        a=(LL)a*a%p;
        k&gt;&gt;=1;
    }
    return res;
}

void init()
{
    fact[0]=infact[0]=1;
    for(int i=1;i&lt;N;i++)
    {
        fact[i]=(LL)fact[i-1]*i%mod;
        infact[i]=qmi(fact[i],mod-2,mod);
    }
}

int main()
{
    init();
    
    int n;
    cin&gt;&gt;n;
    while(n--)
    {
        int a,b;
        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
        printf(&quot;%d\n&quot;,(LL)fact[a]*infact[b]%mod*infact[a-b]%mod);
    }
    return 0;
}
</code></pre>
<p>第二种做法：(递推)<br>
我们先处理每个数关于 p 的逆元 inv[n]。<br>
inv[1] = 1<br>
现在假设我们要求 inv[i]，首先拿 p 除以 i，得到 k，余数是 r。<br>
那么 p = ki + r (r &lt; i, 1 &lt; i &lt; p)<br>
两边都 MOD p，得到 ki + r = 0 (mod p)<br>
ki + r = 0 (mod p)<br>
两边同时乘上 i<sup>{-1}r</sup>{-1}<br>
得到 kr^{-1} + i^{-1} = 0 (mod p)<br>
i^{-1} = -kr^{-1} (mod p)<br>
k = p / i, r = p % i<br>
由于 r &lt; i，所以算inv[i]的时候，inv[r]显然已经算好了<br>
因此 inv[i] = (-p / i) * inv[p % i]</p>
<p>在处理出了每个数关于 p 的逆元。</p>
<pre><code>for (int i = 2;i &lt;= n;i ++)
    inv[i] = (LL)inv[i - 1] * inv[i] % p;
</code></pre>
<p>就可以得到 i! 关于 p 的逆元<br>
此时答案就是<br>
(LL)fact[n] * inv[m] % p * inv[n - m] % p</p>
<p>p一定要是大质数!，起码得大于m。为什么呢？若要求a在模p下的乘法逆元，必须要保证a与p互质。在此题中，要求m!的乘法逆元，那么p必须与m!互质，那么p就要大于m，且是个质数。</p>
<h4 id="求组合数-iiilucas定理">求组合数 III（Lucas定理）：</h4>
<p>适用于对答案模一个质数的情况。<br>
和上面的乘法逆元求组合数的条件对比一下，只相差了一个大字。也就是说这个质数不用很大，非常小也行。<br>
给定 n, m，计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93033em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>对 1000003 取模的结果。n, m &lt;= 1e18<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/16/9969_9dc1cf7267-41.PNG" alt="41.PNG" loading="lazy"><br>
<a href="https://www.acwing.com/activity/content/code/content/122436/">code</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/16/9969_610b591267-42.PNG" alt="42.PNG" loading="lazy"></p>
<h4 id="求组合数-iv分解质因数">求组合数 IV（分解质因数）</h4>
<p>乘法逆元只能处理模数为大质数的情况，卢卡斯定理只能处理模数为质数的情况，那有没有一种方法能处理模数不是质数的情况呢？显然是有的。而且不取模也是可以的。<br>
我们可以把组合数中要乘或除的每一个数分解质因数，再把分母的质因数减掉，最后把剩下的质因数乘起来，边乘边模p就行了。 （如果需要取模的话）<br>
对于n!包含质因子x个数：fac[x]=n/x+n/x2+……+n/xk(直到n/xk=0结束)。<br>
<a href="https://www.acwing.com/activity/content/code/content/122520/">code</a></p>
<h4 id="总结">总结</h4>
<p>每种算法都有其优点与局限性。递推写起来快，思维简单，但时间复杂度高。乘法逆元用得比较普遍，因为一般都是模一个大质数，复杂度也几乎是线性的。卢卡斯定理只会在特定的题目里做到，但其实编程复杂度并不高，就是在乘法逆元的基础上加几句话。质因数分解的适用性最广，编程复杂度也最高，这就是完美的代价吧。<br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/20/9969_d1e87a9c6a-15.png" alt="15.png" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[倍增 ST表 RMQ]]></title>
        <id>https://caifxh.github.io/post/bei-zeng-st-biao-rmq/</id>
        <link href="https://caifxh.github.io/post/bei-zeng-st-biao-rmq/">
        </link>
        <updated>2020-03-28T02:12:15.000Z</updated>
        <content type="html"><![CDATA[<h4 id="倍增">倍增</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_63a9254055-100.png" alt="100.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_7a1c78cc55-101.png" alt="101.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_7e531b9e55-102.png" alt="102.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_8ae2291855-103.png" alt="103.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_949b394055-104.png" alt="104.png" loading="lazy"></p>
<h4 id="st表">ST表</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_cc79cf4855-105.png" alt="105.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_d06c8c3055-106.png" alt="106.png" loading="lazy"></p>
<h4 id="st表创建">ST表创建</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_dfa53a7655-107.png" alt="107.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_104f583c55-110.png" alt="110.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_ca30b97a55-121.PNG" alt="121.PNG" loading="lazy"></p>
<h4 id="st表查询">ST表查询</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_dea27ee855-122.png" alt="122.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_f3b6ffac55-123.png" alt="123.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;//使用log函数
/*log():以e为底的对数，exp(5)=e^5,log(exp(5))=5
  log10():以10为底的对数
  log2():以2为底的对数 
  任何一个其它的对数logm(n)=log(n)/log(m)*/
using namespace std;
const int maxn=105;
int n,a[maxn],F[maxn][maxn];//F(i,j)表示区间[i，i+2^j-1]的最值，区间长度为2^j

void ST_create()
{
	for(int i=1;i&lt;=n;i++)//初始化 
		F[i][0]=a[i];
	int k=log2(n);//log(n)/log(2);
	for(int j=1;j&lt;=k;j++)
		for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++)//n-2^j+1
			F[i][j]=max(F[i][j-1],F[i+(1&lt;&lt;(j-1))][j-1]);
}

int ST_query(int l,int r)//求区间[l..r]的最值 
{
	int k=log2(r-l+1);
	return max(F[l][k],F[r-(1&lt;&lt;k)+1][k]);//取两个区间最值 
}

int ST_print()
{
	int k=log2(n);
	for(int j=0;j&lt;=k;j++)
	{	
		for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++)//n-2^j+1,打印第一列 
			cout&lt;&lt;F[i][j]&lt;&lt;&quot; &quot;;
		cout&lt;&lt;endl;
	}
}

int ST_print2()//按列打印 
{
	int k=log2(n);
	for(int i=1;i&lt;=n;i++)
	{
		for(int j=0;j&lt;=k;j++)
			cout&lt;&lt;F[i][j]&lt;&lt;' ';
		cout&lt;&lt;endl;
	}
}

int main()
{
	int l,r;
	int i,v;
	cin&gt;&gt;n;
	for(i=1;i&lt;=n;i++)
		cin&gt;&gt;a[i];//5 3 7 2 12 1 6 4 8 15
	ST_create();//创建ST表
	ST_print();
	cout&lt;&lt;&quot;输入查询最值的区间l r:&quot;&lt;&lt;endl;
	cin&gt;&gt;l&gt;&gt;r;
	cout&lt;&lt;ST_query(l,r)&lt;&lt;endl;//求区间[l..r]的最值
	return 0;
}
</code></pre>
<h4 id="例题">例题</h4>
<p><a href="http://poj.org/problem?id=3264">poj3264</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/22/9969_96072edc55-130.png" alt="130.png" loading="lazy"></p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;//min,max
#include&lt;cmath&gt;//log
using namespace std;
const int maxn=50010;
int h[maxn];
int Fmax[maxn][20];//F(i,j)表示区间[i，i+2^j-1]的最值，区间长度为2^j
int Fmin[maxn][20];
int N,Q;

void ST_create()
{
	for(int i=1;i&lt;=N;i++)//初始化 
		Fmax[i][0]=Fmin[i][0]=h[i];
	int k=log2(N);//log(N)/log(2.0);
	for(int j=1;j&lt;=k;j++)
		for(int i=1;i&lt;=N-(1&lt;&lt;j)+1;i++)//N-2^j+1
		{
			Fmax[i][j]=max(Fmax[i][j-1],Fmax[i+(1&lt;&lt;(j-1))][j-1]);
			Fmin[i][j]=min(Fmin[i][j-1],Fmin[i+(1&lt;&lt;(j-1))][j-1]);
		}			
}

int RMQ(int l,int r)//求区间[l..r]的最值差 
{
	int k=log2(r-l+1);
	int m1=max(Fmax[l][k],Fmax[r-(1&lt;&lt;k)+1][k]);
	int m2=min(Fmin[l][k],Fmin[r-(1&lt;&lt;k)+1][k]);
	return m1-m2;//取两个区间最值差 
}

int main()
{
	int a,b;
	while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;Q))
	{
		for(int i=1;i&lt;=N;i++)//下标从1开始 
			scanf(&quot;%d&quot;,&amp;h[i]);
		ST_create();
		for(int j=1;j&lt;=Q;j++)
		{
			scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
			printf(&quot;%d\n&quot;,RMQ(a,b));
		}
	}
	return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=3368">poj3368</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_1fce3d8456-001.png" alt="001.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_2d5faac856-002.png" alt="002.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_395ba96d56-003.png" alt="003.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=100010;
int lb[N];		
int f[N][20];//F(i,j)表示区间[i，i+2^j-1]的最值，区间长度为2^j

int n,Q;
int a[N];

void ST_create()
{	
	for(int j=1;j&lt;=lb[n];j++)
		for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++)
			f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]);	
}

int RMQ(int l,int r)
{
	if(l &gt; r)
		return 0;
	int k=lb[r-l+1];
	return max(f[l][k],f[r-(1&lt;&lt;k)+1][k]);
}

int main()
{
	lb[0]=-1;
	for(int i=1;i&lt;N;i++)//求解所有log值,保存到数组lb[] 
		lb[i]=lb[i-1]+!(i&amp;(i-1));
	while(~scanf(&quot;%d%&quot;,&amp;n) &amp;&amp; n)
	{
		scanf(&quot;%d&quot;,&amp;Q);
		for(int i=1;i&lt;=n;i++)
		{
			scanf(&quot;%d&quot;,&amp;a[i]);
			if(i == 1)
			{
				f[i][0]=1;
				continue;
			}
			if(a[i] == a[i-1])
				f[i][0]=f[i-1][0]+1;
			else 
				f[i][0]=1;
		}
		ST_create();
		for(int j=1;j&lt;=Q;j++)
		{
			int l,r;
			scanf(&quot;%d%d&quot;,&amp;l,&amp;r);
			int t=l;
			while(t&lt;=r &amp;&amp; a[t] == a[t-1])
				t++;
			printf(&quot;%d\n&quot;,max(t-l,RMQ(t,r)));
		}
	}
	return 0;
}
</code></pre>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3486">hdu3468</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_dc1676a656-005.png" alt="005.png" loading="lazy"></p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=200010;
int a[N];
int n,k;
int F[N][20],lb[N];

void Initlog()
{
	lb[0]=-1;
    for(int i=1;i&lt;=N;i++)
        lb[i]=lb[i-1]+(i&amp;(i-1)?0:1);
}

void ST()
{
    for(int i=1;i&lt;=n;i++)
		F[i][0]=a[i];
    for(int j=1;j&lt;=lb[n];j++)
        for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++)
            F[i][j]=max(F[i][j-1],F[i+(1&lt;&lt;(j-1))][j-1]);
}

int query(int l,int r)
{
    int k=lb[r-l+1];
    return max(F[l][k],F[r-(1&lt;&lt;k)+1][k]);
}

bool check(int mid)
{
    int t=n/mid,s=0;
    for(int i=0;i&lt;mid;i++)
		s+=query(t*i+1,t*i+t);
    return s&gt;k;
}

int main()
{
    lb[0]=-1;
	for(int i=1;i&lt;N;i++)//求解所有log值,保存到数组lb[] 
		lb[i]=lb[i-1]+!(i&amp;(i-1));
	while(scanf(&quot;%d%d&quot;,&amp;n,&amp;k),n&gt;=0||k&gt;=0)
    {
        int sum=0;
        for(int i=1;i&lt;=n;i++)
        {
            scanf(&quot;%d&quot;,&amp;a[i]);
            sum+=a[i];
        }
        if(sum&lt;=k)
		{
			printf(&quot;-1\n&quot;);
			continue;
		}
		ST();
		int l=1,r=n;
		while(l&lt;r)//二分找划分数 
    	{
	        int mid=(l+r)/2;
	        if(check(mid)) r=mid;
	        else l=mid+1;
    	}
		printf(&quot;%d\n&quot;,l);
    }
    return 0;
}
</code></pre>
<p><a href="http://poj.org/problem?id=2019">poj2019</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/02/24/9969_3d701b9256-007.png" alt="007.png" loading="lazy"></p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
const int maxn=260,INF=0x3f3f3f3f;
using namespace std;
int a[maxn][maxn],lb[maxn];
int Fmax[maxn][maxn][8],Fmin[maxn][maxn][8];
int n,m,k;

void ST()
{
	for(int k=1;k&lt;=n;k++)//多一维 
        for(int i=1;i&lt;=n;i++)
            Fmax[k][i][0]=Fmin[k][i][0]=a[k][i];	
	for(int k=1;k&lt;=n;k++)
		for(int j=1;j&lt;=lb[n];j++)
			for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;i++)
			{
				Fmax[k][i][j]=max(Fmax[k][i][j-1],Fmax[k][i+(1&lt;&lt;(j-1))][j-1]);
				Fmin[k][i][j]=min(Fmin[k][i][j-1],Fmin[k][i+(1&lt;&lt;(j-1))][j-1]);
			}
}

int main()
{
	lb[0]=-1;
	for(int i=1;i&lt;maxn;i++)
		lb[i]=(i&amp;(i-1))?lb[i-1]:lb[i-1]+1;
	while(~scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k))
	{
		for(int i=1;i&lt;=n;i++)
			for(int j=1;j&lt;=n;j++)
				scanf(&quot;%d&quot;,&amp;a[i][j]);	
		ST();
		for(int i=0;i&lt;k;i++)
		{
			int x,y;
			scanf(&quot;%d%d&quot;,&amp;x,&amp;y);
			int k=lb[m];
    		int maxx=-INF;
			int minx=INF;
    		int l=y,r=y+m-1;//从坐标为(x,y)的地方开始，右下扩展B长度 
    		for(int i=x;i&lt;x+m;i++)//查询每一行的最值 
		    {
		        maxx=max(maxx,max(Fmax[i][l][k],Fmax[i][r-(1&lt;&lt;k)+1][k]));
		        minx=min(minx,min(Fmin[i][l][k],Fmin[i][r-(1&lt;&lt;k)+1][k]));
		    }
			printf(&quot;%d\n&quot;,maxx-minx);
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数位dp]]></title>
        <id>https://caifxh.github.io/post/shu-wei-dp/</id>
        <link href="https://caifxh.github.io/post/shu-wei-dp/">
        </link>
        <updated>2020-03-27T16:26:14.000Z</updated>
        <content type="html"><![CDATA[<p>问题的一般形式是这样的：<br>
定义一个条件 A，比如：被 7 整除、数位中含有 3 等等。<br>
询问区间 [L, R] 中有几个数满足条件 A L 和 R 的范围一般非常大，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">10^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span><br>
通过数位 DP，我们会发现这些问题的规模实际上是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mi>R</mi></mrow><annotation encoding="application/x-tex">log_{10} R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></p>
<p>数位 DP 就是考虑数字的每一位。<br>
问题的规模变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mi>R</mi></mrow><annotation encoding="application/x-tex">log_{10} R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span><br>
每一位作为不同的阶段，设计状态。<br>
我们从高位往低位依次枚举。<br>
每一位的数选择的范围是不同的，依据前面选的数决定。</p>
<p><a href="https://www.acwing.com/problem/content/1087/">acwing1085</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_5b537e9670-1.png" alt="1.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_a726651870-3.PNG" alt="3.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_55592c3c70-16.PNG" alt="16.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_1cf88f0a70-6.PNG" alt="6.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_2cd3e1cc70-7.PNG" alt="7.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_46b4d2ae70-8.PNG" alt="8.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_5d38098870-9.PNG" alt="9.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_8bf3feda70-10.PNG" alt="10.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_a49f78ce70-11.PNG" alt="11.PNG" loading="lazy"></p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int dp[15][15];
int num[15];

void init(){//预处理 
    dp[0][0]=1;
    for(int i=1;i&lt;=9;i++)
        for(int j=0;j&lt;=9;j++){
            if(j==4)
                dp[i][j]=0;
            else
                for(int k=0;k&lt;=9;k++){
                    if(j==6&amp;&amp;k==2)
                        continue;
                    dp[i][j]+=dp[i-1][k];
                }
        }
}

int solve(int x)//求解[1..x]之间满足条件的个数 
{
    int ans=0,cnt=0;
    while(x)
        num[++cnt]=x%10,x/=10;
    num[cnt+1]=0;
    for(int i=cnt;i&gt;=1;i--){//高位向低位计算 
        for(int j=0;j&lt;num[i];j++)
            if(j==4||(j==2&amp;&amp;num[i+1]==6))
            	continue;
            else
				ans+=dp[i][j];
        if(num[i]==4||(num[i]==2&amp;&amp;num[i+1]==6)){
			ans--;//减1，例如4，统计0，1 ，2，3共4个其实只有3个满足（不包括0） 
				 //例如3，统计0，1 ，2共3个满足，0相当于统计了3本身 
            break;
    	}
    }
    return ans;
}

void print(){//输出初始化处理后的dp数组 
	printf(&quot;  j=\t&quot;);
	for(int j=0;j&lt;=9;j++)
		printf(&quot;%-10d&quot;,j);
	printf(&quot;\n&quot;);
	for(int i=1;i&lt;=9;i++){
    	printf(&quot;i=%d\t&quot;,i);
		for(int j=0;j&lt;=9;j++)
			printf(&quot;%-10d&quot;,dp[i][j]);	
		printf(&quot;\n&quot;);
	}
}

int main()
{
    int n,m;
    memset(dp,0,sizeof dp);
    init();//初始化处理 
    //print();//输出dp数组 
    while(~scanf(&quot;%d%d&quot;,&amp;m,&amp;n),n+m){//测试 1 24  62 386
    	//printf(&quot;%d\n&quot;,solve(n));
    	//printf(&quot;%d\n&quot;,solve(m));
        printf(&quot;%d\n&quot;,solve(n)-solve(m-1));
	}
    return 0;
}
</code></pre>
<h4 id="记忆化递归">记忆化递归</h4>
<p><img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_e2f83cfa70-12.PNG" alt="12.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_ef66924870-13.PNG" alt="13.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_038a069c70-14.PNG" alt="14.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_17c8b8e270-15.PNG" alt="15.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_752403fc70-17.PNG" alt="17.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_b902736a70-18.PNG" alt="18.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_de4ca76c70-19.PNG" alt="19.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_89782eea70-25.PNG" alt="25.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_2799b6c670-21.PNG" alt="21.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_4679d09470-22.PNG" alt="22.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_6c99dc9c70-23.PNG" alt="23.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_6f0abf1470-24.PNG" alt="24.PNG" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
using namespace std;
int a[20];
int dp[20][2];
//dp[pos][sta]表示当前第pos位，sta状态下满足条件的个数，sta表示前一位是否是6，只有0和1两种状态
int dfs(int pos,bool sta,bool limit)
{
    if(pos==0) return 1;
    if(!limit&amp;&amp;dp[pos][sta]!=-1) return dp[pos][sta];
    int len=limit?a[pos]:9;
    int ans=0;
    for(int i=0;i&lt;=len;i++)
    {
        if(sta&amp;&amp;i==2)continue;
        if(i==4) continue;//都是保证枚举合法性
        ans+=dfs(pos-1,i==6,limit&amp;&amp;i==len);
    }
    if(!limit) dp[pos][sta]=ans;
    return ans;
}

int solve(int x)//求解[0..x]之间满足条件的个数 
{
    int pos=0;
    while(x){
        a[++pos]=x%10;
        x/=10;
    }
    return dfs(pos,0,1);//如果不包括0，此处减1即可
}

void print(){//输出dp数组 
	printf(&quot;  j=\t&quot;);
	for(int j=0;j&lt;=1;j++)
		printf(&quot;%-10d&quot;,j);
	printf(&quot;\n&quot;);
	for(int i=1;i&lt;=9;i++){
    	printf(&quot;i=%d\t&quot;,i);
		for(int j=0;j&lt;=1;j++)
			printf(&quot;%-10d&quot;,dp[i][j]);	
		printf(&quot;\n&quot;);
	}
}

int main()
{
    int a,b;
    memset(dp,-1,sizeof dp);
    while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b),a+b)//测试24 386 
    {
		//printf(&quot;%d\n&quot;,solve(a));
		//print();
    	//printf(&quot;%d\n&quot;,solve(b));
    	//print();
		printf(&quot;%d\n&quot;,solve(b)-solve(a-1));
    }
    return 0;
}
</code></pre>
<h4 id="例题">例题</h4>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3555">hdu3555</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_0523299470-26.png" alt="26.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_00483fe070-27.png" alt="27.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_11b93f5470-28.png" alt="28.png" loading="lazy"></p>
<h4 id="正向做法">正向做法</h4>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long LL;
const int N=20;
LL f[N][2];
LL ten[N];
int num[N];
LL n;

LL dfs(int pos,bool sta,bool limit)
{
	if(pos == 0) return 0;
	if(!limit &amp;&amp; f[pos][sta] != -1)
		return f[pos][sta];
	
	int len=limit?num[pos]:9;
	LL ans=0;
	for(int i=0;i&lt;=len;i++)
	{
		if(sta &amp;&amp; i==9)
			ans+=limit?n%ten[pos-1]+1:ten[pos-1];
		else
			ans+=dfs(pos-1,i==4,limit&amp;&amp;i==len);
	}
	if(!limit)
		f[pos][sta]=ans;
	return ans;
}

LL dp(LL n)//求解[1..x]之间满足条件的个数 
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,0,1);
}

int main()
{
	int T;
	cin&gt;&gt;T;
	memset(f,-1,sizeof f);
	ten[0]=1;
	for(int i=1;i&lt;N;i++)
		ten[i]=ten[i-1]*10;
	while(T--)
	{
		scanf(&quot;%lld&quot;,&amp;n);
		printf(&quot;%lld\n&quot;,dp(n));
	}
	return 0;
}
</code></pre>
<h4 id="反向做法">反向做法</h4>
<pre><code>#include&lt;cstdio&gt;//求不包含49的个数ans(不包括0)，然后n-ans
#include&lt;cstring&gt;
using namespace std;
typedef long long LL;//注意！！本题数据类型为ll 
const int N=30;
int dig[N];
LL dp[N][2],n;
//dp[pos][sta]表示当前第pos位，sta状态下满足条件的个数，sta表示前一位是否是4，只有0和1两种状态
LL dfs(int pos,bool sta,bool limit)//求不包含49的个数
{
    if(!pos) return 1;//包括0 
    if(!limit&amp;&amp;dp[pos][sta]!=-1) return dp[pos][sta];
    int len=limit?dig[pos]:9;
    LL ans=0;
    for(int i=0;i&lt;=len;i++)
    {
        if(sta&amp;&amp;i==9)
        	continue;
        ans+=dfs(pos-1,i==4,limit&amp;&amp;i==len);
    }
    if(!limit) dp[pos][sta]=ans;
    return ans;
}

LL solve(LL x)//求解[1..x]之间不包含49的个数 
{
    int pos=0;
    while(x){
        dig[++pos]=x%10;
        x/=10;
    }
    return dfs(pos,0,1)-1;//除去0 
}

int main()
{
    memset(dp,-1,sizeof(dp));
	int T;
	scanf(&quot;%d&quot;,&amp;T);
	while(T--){
		scanf(&quot;%I64d&quot;,&amp;n);
		printf(&quot;%I64d\n&quot;,n-solve(n));
	}
    return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/340/">acwing338</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_79719d0070-29.png" alt="29.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_7c8b84ec70-30.png" alt="30.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=10;
int f[N][10][N];
int num[N];
int ans1[N];
int ans2[N];

int dfs(int pos,int val,int cnt,bool lead,bool limit)
{
    if(pos == 0) return cnt;
    if(!limit &amp;&amp; !lead &amp;&amp; f[pos][val][cnt] != -1)
        return f[pos][val][cnt];

    int len=limit?num[pos]:9;
    int ans=0,t=0;
    for(int i=0;i&lt;=len;i++)
    {
        if(val != i) t=cnt;
        else 
        {
            if(lead &amp;&amp; val==0)
                t=0;
            else  
                t=cnt+1;
        }
        ans+=dfs(pos-1,val,t,lead&amp;&amp;i==0,limit&amp;&amp;i==len);
    }
    if(!limit &amp;&amp; !lead) f[pos][val][cnt]=ans;
    return ans;
}

void dp(int n,int ans[])
{
    int pos=0;
    while(n)
    {
        num[++pos]=n%10;
        n/=10;
    }

    for(int i=0;i&lt;=9;i++)
        ans[i]=dfs(pos,i,0,1,1);
}

int main()
{
    memset(f,-1,sizeof f);
    int a,b;
    while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b))
    {
        if(!a &amp;&amp; !b) break;
        if(a&gt;b) swap(a,b);
        dp(b,ans1);
        dp(a-1,ans2);
        for(int i=0;i&lt;10;i++)
            printf(&quot;%d &quot;,ans1[i]-ans2[i]);
    }
    return 0;
}
</code></pre>
<p><a href="https://vjudge.net/problem/POJ-3252">poj3252</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_5712eaa670-32.png" alt="32.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=35;
int f[N][N][N];
int num[N];

int dfs(int pos,int cnt0,int cnt1,bool lead,bool limit)
{
	if(pos == 0) return cnt0&gt;=cnt1;
	if(!limit &amp;&amp; !lead &amp;&amp; f[pos][cnt0][cnt1] != -1)
		return f[pos][cnt0][cnt1];

	int len=limit?num[pos]:1;
	int ans=0;
	for(int i=0;i&lt;=len;i++)
	{
		if(lead &amp;&amp; !i)
			ans+=dfs(pos-1,0,0,1,limit&amp;&amp;i==len);
		else 
			ans+=dfs(pos-1,cnt0+(i==0),cnt1+(i==1),0,limit&amp;&amp;i==len);
	}
	if(!limit &amp;&amp; !lead)
		f[pos][cnt0][cnt1]=ans;
	return ans;
}

int dp(int n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%2;
		n/=2;
	}
	
	return dfs(pos,0,0,1,1);
}

int main()
{
	int a,b;
	memset(f,-1,sizeof f);
	while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b))
		printf(&quot;%d\n&quot;,dp(b)-dp(a-1));
	return 0;
}
</code></pre>
<p><a href="https://vjudge.net/problem/HDU-4734">hdu4734</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_3d9a111a70-43.png" alt="43.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_50fd7d5070-44.png" alt="44.png" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/28/9969_5440e4d470-45.png" alt="45.png" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=10,M=4610;
int f[N][M];
int num[N];
int a,b;

int dfs(int pos,int val,bool limit)
{
	if(pos == 0) return val&gt;=0;
	if(val &lt; 0) return 0;
	if(!limit &amp;&amp; f[pos][val] != -1)
		return f[pos][val];
	
	int ans=0;
	int len=limit?num[pos]:9;
	for(int i=0;i&lt;=len;i++)
		ans+=dfs(pos-1,val-i*(1&lt;&lt;pos-1),limit &amp;&amp; i==len);
	if(!limit) f[pos][val]=ans;
	return ans;

}


int F(int n)
{
	int ans=0,len=0;
	while(n)
	{
		ans+=(n%10)*(1&lt;&lt;len);
		len++;
		n/=10;
	}
	return ans;
}

int dp(int n)//求解小于等于f(a)的数的个数 
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,F(a),1);
}

int main()
{
	int T,kas=1;
	cin&gt;&gt;T;
	memset(f,-1,sizeof f);
	while(T--)
	{
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		printf(&quot;Case #%d: %d\n&quot;,kas++,dp(b));
	}
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1083/">acwing1081</a><br>
统计区间内一个数的B进制表示下恰好有k位为1的数的个数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=35;
int f[N][N];
int num[N];
int k,b;

int dfs(int pos,int cnt,bool limit)
{
    if(cnt &gt; k) return 0;
	if(pos == 0) return cnt==k;
	
	if(f[pos][cnt] != -1 &amp;&amp; !limit) 
		return f[pos][cnt];
	
	int len=limit?num[pos]:1;
	int ans=0;
	for(int i=0;i&lt;=min(len,1);i++)
		if(i) ans+=dfs(pos-1,cnt+1,limit&amp;&amp;i==len);
		else ans+=dfs(pos-1,cnt,limit&amp;&amp;i==len);

	if(!limit) f[pos][cnt]=ans;
	return ans;
}

int dp(int n)
{
	int pos=0;
	while(n) num[++pos]=n%b,n/=b;
	
	return dfs(pos,0,1);
}

int main()
{
	int l,r;
	memset(f,-1,sizeof f);
	scanf(&quot;%d%d%d%d&quot;,&amp;l,&amp;r,&amp;k,&amp;b);
	
	printf(&quot;%d\n&quot;,dp(r)-dp(l-1));
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1084/">acwing1082</a><br>
统计区间内不下降数的个数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=15;
int f[N][10];
int num[N];

int dfs(int pos,int last,bool limit)
{
	if(pos ==0) return 1;
	if(f[pos][last] != -1 &amp;&amp; !limit)
		return f[pos][last];

	int ans=0;
	int len=limit?num[pos]:9;
	for(int i=0;i&lt;=len;i++)
	{
		if(i&lt;last) continue;
		ans+=dfs(pos-1,i,limit&amp;&amp;i==len);
	}
	
	if(!limit) f[pos][last]=ans;
	return ans;
	
}

int dp(int n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,0,1);
}

int main()
{
	int a,b;
	memset(f,-1,sizeof f);
	while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b))
		printf(&quot;%d\n&quot;,dp(b)-dp(a-1));
	
	return 0;
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P4127">P4127</a><br>
询问 [L,R] 中各位数字之和能整除原数的个数。1 ≤ L ≤ R ≤ 1e18</p>
<h4 id="思路">思路</h4>
<p>可以发现各位数之和最大只能是 9 * 18 = 162<br>
我们可以枚举这个和 sum<br>
然后去统计可以被 sum 整除，且数位和是 sum 的数。<br>
我们把状态定义为 f[dep][cur][mod]<br>
表示当前枚举第 dep 位，目前这个数的数位和是 cur，对<br>
sum 取模是 mod.<br>
cur = sum 且 mod = 0 的个数要统计进答案</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
typedef long long LL;
const int N=20,M=170;
LL f[N][M][M];
int num[N];
LL a,b;
LL sum;

LL dfs(int pos,int val,int mod,bool limit)//val为当前各位数字之和 
{
	if(pos == 0) return val==sum &amp;&amp; mod==0;
	if(val &gt; sum) return 0;
	
	if(!limit &amp;&amp; f[pos][val][mod] != -1)
		return f[pos][val][mod];
	
	int len=limit?num[pos]:9;
	LL ans=0;
	for(int i=0;i&lt;=len;i++)
		ans+=dfs(pos-1,val+i,(mod*10+i)%sum,limit&amp;&amp;i==len);
	
	if(!limit) f[pos][val][mod]=ans;
	return ans;
}

LL dp(LL n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	LL res=0;
	for(int i=1;i&lt;=pos*9;i++)//枚举各位之和
	{
		memset(f,-1,sizeof f);
		sum=i;
		res+=dfs(pos,0,0,1);
	}
	
	return res;
}

int main()
{
	cin&gt;&gt;a&gt;&gt;b;
	cout&lt;&lt;dp(b)-dp(a-1)&lt;&lt;endl;
	
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1085/">acwing1083</a><br>
求区间内任意相邻位上的数字之差的绝对值大于等于二的数的个数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=11;
int f[N][10];
int num[N];

int dfs(int pos,int val,bool lead,bool limit)
{
	if(pos == 0) return 1;
	if(!limit &amp;&amp; !lead &amp;&amp; f[pos][val] != -1)
		return f[pos][val];
	
	int len=limit?num[pos]:9;
	int ans=0;
	for(int i=0;i&lt;=len;i++)
	{
		if(lead || abs(i-val) &gt;= 2)//如果包含前导零不能让i与之做差，直接让i成为下一位即可
			ans+=dfs(pos-1,i,lead&amp;&amp;i==0,limit&amp;&amp;i==len);
	}
	
	if(!limit &amp;&amp; !lead) f[pos][val]=ans;
	return ans;
}

int dp(int n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,-2,1,1);
}

int main()
{
	memset(f,-1,sizeof f);
	int a,b;
	cin&gt;&gt;a&gt;&gt;b;
	cout&lt;&lt;dp(b)-dp(a-1)&lt;&lt;endl;
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/description/1086/">acwing1084</a><br>
求区间内各位数字之和mod N为0的数的个数</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=11,M=110;
int f[N][M];
int num[N];
int a,b,mod;

int dfs(int pos,int val,bool limit)
{
	if(pos == 0) return val == 0;
	if(!limit &amp;&amp; f[pos][val] != -1)
		return f[pos][val];
	
	int len=limit?num[pos]:9;
	int ans=0;
	for(int i=0;i&lt;=len;i++)
		ans+=dfs(pos-1,(val+i)%mod,limit&amp;&amp;i==len);
	
	if(!limit) f[pos][val]=ans;
	return ans;
}

int dp(int n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,0,1);
}

int main()
{
	while(~scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;mod))
	{
		memset(f,-1,sizeof f);
		printf(&quot;%d\n&quot;,dp(b)-dp(a-1));
	}
	return 0;
}
</code></pre>
<p><a href="https://vjudge.net/problem/HDU-3709">hdu3709</a><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/29/9969_a954c17971-46.PNG" alt="46.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/29/9969_aca5ab8071-47.PNG" alt="47.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/29/9969_aeca18ec71-48.PNG" alt="48.PNG" loading="lazy"><br>
<img src="https://cdn.acwing.com/media/article/image/2020/03/29/9969_b0c16ca471-49.PNG" alt="49.PNG" loading="lazy"></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
typedef long long LL;
using namespace std;
const int N=20,M=2000;
LL f[N][N][M];
int num[N];

LL dfs(int pos,int val,int sum,bool limit)
{
	if(pos == 0) return sum==0;
	if(sum&lt;0) return 0;
	if(!limit &amp;&amp; f[pos][val][sum] != -1)
		return f[pos][val][sum];
	
	int len=limit?num[pos]:9;
	LL ans=0;
	for(int i=0;i&lt;=len;i++)
		ans+=dfs(pos-1,val,sum+(pos-val)*i,limit&amp;&amp;i==len);
	
	if(!limit) f[pos][val][sum]=ans;
	return ans;
}

LL dp(LL n)
{
	if(n&lt;0) return 0;
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	LL ans=0;
	for(int i=1;i&lt;=pos;i++)
		ans+=dfs(pos,i,0,1);
	return ans-pos+1;//pos次循环统计了pos次0，应减去多算的pos-1个0的出现次数
}

int main()
{
	int T;
	cin&gt;&gt;T;
	memset(f,-1,sizeof f);
	while(T--)
	{
		LL a,b;
		scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);
		printf(&quot;%lld\n&quot;,dp(b)-dp(a-1));
	}
	return 0;
}
</code></pre>
<p><a href="https://www.acwing.com/problem/content/1088/">hdu4507</a><br>
如果一个整数符合下面3个条件之一，那么我们说这个整数和7有关：<br>
整数中某一位是7<br>
整数的每一位加起来的和是7的整数倍<br>
这个整数是7的整数倍<br>
询问[L,R]中与7无关的数字的平方和，模1e9+7.1≤L≤R≤1e18</p>
<p>为了转移需要维护三个值：<br>
cnt 和 7 有关的数的个数<br>
sum 和 7 有关的数的和<br>
sqr 和 7 有关的数的平方和</p>
<p><img src="https://cdn.acwing.com/media/article/image/2020/03/29/9969_69658fe271-50.PNG" alt="50.PNG" loading="lazy"><br>
因此对于所有回溯上来的数x1,x2,x3..xn，你得知道与7无关的数的个数（对应n个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">d^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的和），<br>
与7有关的数之和（对应2d(x1+x2+...+xn），与7有关的数的平方和（对应<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x_1^2+x_2^2+...+x_n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>）<br>
假设当前状态是 f，从 g 状态转移过来（dfs回溯上来）<br>
f.cnt += g.cnt<br>
f.sum += g.sum + d * g.cnt<br>
f.sqr += d * d * g.cnt + 2 * d * g.sum + g.sqr</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
typedef long long LL;
using namespace std;
const int N=20,mod=1e9+7;
struct Node
{
	LL cnt;
	LL sum;
	LL sqr;
}f[N][7][7];//分别表示数位，各位和%7，数本身%7 
int num[N];
LL ten[N];

Node dfs(int pos,int val,int sum,bool limit)
{
	if(pos == 0)
	{
		Node t;
		t.cnt= val&gt;0 &amp;&amp; sum&gt;0;
		t.sum=0;
		t.sqr=0;
		return t;
	}
	if(!limit &amp;&amp; f[pos][val][sum].cnt != -1)
		return f[pos][val][sum];
	
	int len=limit?num[pos]:9;
	Node ans;
	ans.cnt=ans.sum=ans.sqr=0;
	for(int i=0;i&lt;=len;i++)
	{
		if(i == 7) continue;
		LL d=i*ten[pos-1]%mod;
		Node t=dfs(pos-1,(val+i)%7,(sum*10+i)%7,limit&amp;&amp;i==len);
		ans.cnt=(ans.cnt+t.cnt)%mod;
		ans.sum=(ans.sum+t.sum+d*t.cnt%mod)%mod;
		ans.sqr=(ans.sqr+t.sqr+d*d%mod*t.cnt%mod+2*d%mod*t.sum%mod)%mod;
	}
	
	if(!limit) f[pos][val][sum]=ans;
	return ans;
}

int dp(LL n)
{
	int pos=0;
	while(n)
	{
		num[++pos]=n%10;
		n/=10;
	}
	
	return dfs(pos,0,0,1).sqr;
}

int main()
{
	int T;
	cin&gt;&gt;T;
	memset(f,-1,sizeof f);
	ten[0]=1;
	for(int i=1;i&lt;N;i++)
		ten[i]=ten[i-1]*10%mod;

	while(T--)
	{
		LL a,b;
		scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);
		printf(&quot;%d\n&quot;,((dp(b)-dp(a-1))%mod+mod)%mod);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>